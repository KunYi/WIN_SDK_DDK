
program threadTest;
#linker( "comdlg32.lib" ) 
#linker( "comctl32.lib" )

?compileAll		:= true;

?@NoDisplay 	:= true;
?@NoStackAlign	:= true;

#includeOnce( "stdlib.hhf" )

#includeOnce( "howl.hhf" )


const
	applicationName := "Thread Demo #1";
	formX			:= w.CW_USEDEFAULT;	// Let Windows position this guy
	formY			:= w.CW_USEDEFAULT;
	formW			:= 600;
	formH			:= 600;


	


// Form declaration.
// We've got an empty form with no widgets, so this is fairly trivial:
	
wForm( mainAppWindow );
endwForm


// Must include the following macro invocation to emit the code that the
// wForm macro generated:

mainAppWindow_implementation();
	

// Here's a thread procedure to run to demonstrate
// calling howl.mainThreadExecute from a thread
// other than the main thread.

procedure myThread( mainWindowHandle:dword );
begin myThread;

	howl.mainThreadExecute
	( 
		mainWindowHandle, 
		thunk 
		#{
			stdout.put( "Posted from Thread" nl );
		}# 
	);
	howl.mainThreadAsyncExecute
	( 
		mainWindowHandle, 
		thunk 
		#{
			stdout.put( "Posted from Thread (Async)" nl );
		}# 
	);
	w.ExitThread( 0 );

end myThread;



// The following gets called immediately after the main application
// window is created. It must be provided, even if it does nothing.
		
method mainAppWindow_t.onCreate;
var
	threadID:dword;
begin onCreate;

	// Start myThread so we can test howl.mainThreadExecute
	// running from a thread.
	
	w.CreateThread
	(
		NULL,			// Security attributes
		2048,			// Initial stack size
		&myThread,		// Address of procedure to use for thread
		this.handle,	// Main application window handle is the parameter
		0,				// Creation flags
		threadID		// Put new thread ID here
	);

	// Here's a call to howl.mainThreadExecute that is made
	// from the main thread. This just verifies that it is
	// possible to make this call from the main thread.
	
	howl.mainThreadExecute
	( 
		this.handle, 
		thunk 
		#{
			stdout.put( "Posted from Main" nl );
		}# 
	);
	
	howl.mainThreadAsyncExecute
	( 
		this.handle, 
		thunk 
		#{
			stdout.put( "Posted from Main (async)" nl );
		}# 
	);

end onCreate;




	
	
///////////////////////////////////////////////////////////////////////////////
//
//
// The following is mostly boilerplate code for all apps (about the only thing
// you would change is the size of the main app's form)
//
//
///////////////////////////////////////////////////////////////////////////////
//	
// When the main application window closes, we need to terminate the 
// application. This overridden method handles that situation.  Notice the
// override declaration for onClose in the wForm declaration given earlier.
// Without that, mainAppWindow_t would default to using the wVisual_t.onClose
// method (which does nothing). 
		
method mainAppWindow_t.onClose;
begin onClose;
	

	// Tell the winmain main program that it's time to terminate.
	// Note that this message will (ultimately) cause the appTerminate
	// procedure to be called.
	
	w.PostQuitMessage( 0 );
	
	
end onClose;

			   
   

			   
   
// When the application begins execution, the following procedure
// is called.  This procedure must create the main
// application window in order to kick off the execution of the
// GUI application:
  
procedure appStart;
begin appStart;

	push( esi );
	
	// Create the main application window:
	
	mainAppWindow.create_mainAppWindow
	(
		applicationName,		// Window title
		w.WS_EX_CONTROLPARENT,	// Need this to support TAB control selection
		w.WS_OVERLAPPEDWINDOW,	// Style 
		NULL,					// No parent window 									
		formX,					// x-coordinate for window. 
		formY,					// y-coordinate for window.
		formW,					// Width
		formH,					// Height
		howl.bkgColor_g,		// Background color
		true					// Make visible on creation 
	);
	mov( esi, pmainAppWindow );	// Save pointer to main window object.
	pop( esi );

end appStart;



// appTerminate-
//
//	Called when the application is quitting, giving the app a chance
// to clean up after itself.
//
// Note that this is called *after* the mainAppWindow_t.onClose method
// executes (indeed, mainAppWindow_t.onClose, by posting the quit message,
// is what actually causes the program to begin terminating, which leads
// to the execution of this procedure).

procedure appTerminate;
begin appTerminate;
	
	// Clean up the main application's form.
	// Note that this will recursively clean up all the widgets on the form.
	
	mainAppWindow.destroy();
	
end appTerminate;


// appException-
//
// Gives the application the opportunity to clean up before
// aborting when an unhandled exception comes along:

procedure appException
( 
	theException	:dword in eax;
	raiseAdrs		:dword in ebx;
	filename		:string in ecx;
	userCode		:dword in edx;
	lineNum			:uns32 in edi 
);
begin appException;

	raise( eax );

end appException;



// The main program for a HOWL application must simply
// call the HowlMainApp procedure.

begin threadTest;

	// Set up the background and transparent colors that the
	// form will use when registering the window_t class:
	
	w.GetSysColor( w.COLOR_MENU );
	mov( eax, howl.bkgColor_g );
	or( $FF00_0000, eax );
	mov( eax, howl.transparent_g );
	w.CreateSolidBrush( howl.bkgColor_g );
	mov( eax, howl.bkgBrush_g );

	HowlMainApp();
	
	// Delete the brush we created earlier:
	
	w.DeleteObject( howl.bkgBrush_g );			
				
end threadTest;
 