// pgm_timer1
//
//	This is a simple program that demonstrates the use of the timer widget


program pgm_timer1;
#linker( "comdlg32.lib" ) 
#linker( "comctl32.lib" )

?compileAll		:= true;

?@NoDisplay 	:= true;
?@NoStackAlign	:= true;

#includeOnce( "stdlib.hhf" )

#includeOnce( "howl.hhf" )


const
	applicationName := "Timer #1";
	formX			:= w.CW_USEDEFAULT;	// Let Windows position this guy
	formY			:= w.CW_USEDEFAULT;
	formW			:= 600;
	formH			:= 600;

	


// Forward declarations for the  widgetProcs that we're going to
// call when an event occurs.

proc onTimeOut			:widgetProc; @forward;
proc onQuit				:widgetProc; @forward;


// Form declaration.
// We've got an empty form with no widgets, so this is fairly trivial:
	
wForm( mainAppWindow );

	wLabel
	(
		label1,
		"Timer: ",
		10,
		10,
		200,
		25,
		w.DT_LEFT,
		RGB( 0, 0, 0 ),
		howl.bkgColor_g
	)
	
	wTimer
	(
		timer1,
		5000,
		wTimer_t.oneShot,
		onTimeOut
	)
	
	
	// Place a quit button in the lower-right-hand corner of the form:
	
	wPushButton
	(
		quitButton,				// Field name in mainWindow object
		"Quit",					// Caption for push button
		450,					// x position 
		525,					// y position 
		125,					// width 
		25,						// height 
		onQuit					// "on click" event handler 
	)
	
	
endwForm


// Must include the following macro invocation to emit the code that the
// wForm macro generated:

mainAppWindow_implementation();
	




proc onTimeOut:widgetProc;
static
	timeCnt	:uns32 := 0;
	
var
	timeStr	:string;
	timeBuf	:char[256];
	
begin onTimeOut;

	mov( thisPtr, esi );
	(type wTimer_t [esi]).get_timing();
	if( eax = wTimer_t.oneShot ) then
	
		stdout.put( "One Shot timed out", nl );
		(type wTimer_t [esi]).set_timing( wTimer_t.periodic );
		(type wTimer_t [esi]).set_period( 2000 );
		(type wTimer_t [esi]).start();
		mov( mainAppWindow.label1, esi );
		(type wLabel_t [esi]).set_caption( "One Shot timed out" );
		
	else
	
		str.init( timeBuf, @size( timeBuf ));
		mov( eax, timeStr );
		str.put( timeStr, "Periodic: ", timeCnt );
		mov( mainAppWindow.label1, esi );
		(type wLabel_t [esi]).set_caption( timeStr );
		inc( timeCnt );	
		stdout.put( "Periodic timed out:", timeCnt, nl );
		
	endif;
	
end onTimeOut;


// Here's the onClick event handler for our quit button on the form.
// This handler will simply quit the application:

proc onQuit:widgetProc;
begin onQuit;

	// Quit the app:
	
	w.PostQuitMessage( 0 );

end onQuit;





// We'll use the main application form's onCreate method to initialize
// the various buttons on the form.
//
// This could be done in appStart, but better to leave appStart mainly
// as boilerplate code. Also, putting this code here allows us to use
// "this" to access the mainAppWindow fields (a minor convenience).
		
method mainAppWindow_t.onCreate;
begin onCreate;

	mov( mainAppWindow.timer1, esi );
	(type wTimer_t [esi]).start();
	
end onCreate;

	
	
///////////////////////////////////////////////////////////////////////////////
//
//
// The following is mostly boilerplate code for all apps (about the only thing
// you would change is the size of the main app's form)
//
//
///////////////////////////////////////////////////////////////////////////////
//	
// When the main application window closes, we need to terminate the 
// application. This overridden method handles that situation.  Notice the
// override declaration for onClose in the wForm declaration given earlier.
// Without that, mainAppWindow_t would default to using the wVisual_t.onClose
// method (which does nothing). 
		
method mainAppWindow_t.onClose;
begin onClose;
	
	// Tell the winmain main program that it's time to terminate.
	// Note that this message will (ultimately) cause the appTerminate
	// procedure to be called.
	
	w.PostQuitMessage( 0 );
	
	
end onClose;

			   
   
			   
   
// When the application begins execution, the following procedure
// is called.  This procedure must create the main
// application window in order to kick off the execution of the
// GUI application:
  
procedure appStart;
begin appStart;

	push( esi );
	
	// Create the main application window:
	
	mainAppWindow.create_mainAppWindow
	(
		applicationName,		// Window title
		w.WS_EX_CONTROLPARENT,	// Need this to support TAB control selection
		w.WS_OVERLAPPEDWINDOW,	// Style 
		NULL,					// No parent window 									
		formX,					// x-coordinate for window. 
		formY,					// y-coordinate for window.
		formW,					// Width
		formH,					// Height
		howl.bkgColor_g,		// Background color
		true					// Make visible on creation 
	);
	mov( esi, pmainAppWindow );	// Save pointer to main window object.
	pop( esi );

end appStart;



// appTerminate-
//
//	Called when the application is quitting, giving the app a chance
// to clean up after itself.
//
// Note that this is called *after* the mainAppWindow_t.onClose method
// executes (indeed, mainAppWindow_t.onClose, by posting the quit message,
// is what actually causes the program to begin terminating, which leads
// to the execution of this procedure).

procedure appTerminate;
begin appTerminate;
	
	// Clean up the main application's form.
	// Note that this will recursively clean up all the widgets on the form.
	
	mainAppWindow.destroy();
	
end appTerminate;


// appException-
//
// Gives the application the opportunity to clean up before
// aborting when an unhandled exception comes along:

procedure appException
( 
	theException	:dword in eax;
	raiseAdrs		:dword in ebx;
	filename		:string in ecx;
	userCode		:dword in edx;
	lineNum			:uns32 in edi 
);
begin appException;

	raise( eax );

end appException;



// The main program for a HOWL application must simply
// call the HowlMainApp procedure.

begin pgm_timer1;

	// Set up the background and transparent colors that the
	// form will use when registering the window_t class:
	
	w.GetSysColor( w.COLOR_MENU );
	mov( eax, howl.bkgColor_g );
	or( $FF00_0000, eax );
	mov( eax, howl.transparent_g );
	w.CreateSolidBrush( howl.bkgColor_g );
	mov( eax, howl.bkgBrush_g );

	HowlMainApp();
	
	// Delete the brush we created earlier:
	
	w.DeleteObject( howl.bkgBrush_g );			
				
end pgm_timer1;
 