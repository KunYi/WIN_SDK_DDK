// label1-
//
//	This program demonstrates the use of labels on a form.

program label1;
#linker( "comdlg32.lib" ) 
#linker( "comctl32.lib" )

?@NoDisplay 	:= true;
?@NoStackAlign	:= true;

#includeOnce( "stdlib.hhf" )
#includeOnce( "howl.hhf" )

const
	applicationName := "Labels #1";
	formX			:= w.CW_USEDEFAULT;	// Let Windows position this guy
	formY			:= w.CW_USEDEFAULT;
	formW			:= 600;
	formH			:= 600;

static
	align( 4 );
	
	originalString	:string :=
		"This is a somewhat long string that will wrap around in the box";
	
	
// Forward declarations for the onClick widgetProcs that we're going to
// call when an event occurs.

proc hideShowText		:widgetProc; @forward;
proc moveText			:widgetProc; @forward;
proc resizeText			:widgetProc; @forward;
proc colorText			:widgetProc; @forward;
proc changeText			:widgetProc; @forward;
proc onQuit				:widgetProc; @forward;



// Here's the main form definition for the app:

wForm( mainAppWindow );

	var
		showState	:boolean;
		align(4);
	
	
	wLabel
	(
		label1,
		originalString,
		10,
		10,
		200,
		200,
		w.DT_LEFT | w.DT_WORDBREAK,
		RGB( 0, 0, 0 ),
		howl.bkgColor_g
	)
	
	wPushButton
	(
		button2,					// Field name in mainWindow object
		"Hide text",				// Caption for push button
		250,						// x position 
		10,							// y position 
		175,						// width 
		25,							// height 
		hideShowText				// initial "on click" event handler 
	)
	
	
	wPushButton
	(
		button3,					// Field name in mainWindow object
		"Move text",				// Caption for push button
		250,						// x position 
		40,							// y position 
		175,						// width 
		25,							// height 
		moveText					// initial "on click" event handler 
	)
	
	
	wPushButton
	(
		button4,					// Field name in mainWindow object
		"Resize text",				// Caption for push button
		250,						// x position 
		70,							// y position 
		175,						// width 
		25,							// height 
		resizeText					// initial "on click" event handler 
	)
	
	
	wPushButton
	(
		button5,					// Field name in mainWindow object
		"Change Color",				// Caption for push button
		250,						// x position 
		100,						// y position 
		175,						// width 
		25,							// height 
		colorText					// initial "on click" event handler 
	)
	
	
	wPushButton
	(
		button6,					// Field name in mainWindow object
		"Change text",				// Caption for push button
		250,						// x position 
		130,						// y position 
		175,						// width 
		25,							// height 
		changeText					// initial "on click" event handler 
	)
	
	
	
	
	// Place a quit button in the lower-right-hand corner of the form:
	
	wPushButton
	(
		quitButton,				// Field name in mainWindow object
		"Quit",					// Caption for push button
		450,					// x position 
		525,					// y position 
		125,					// width 
		25,						// height 
		onQuit					// "on click" event handler 
	)
	
endwForm


// Must invoke the following macro to emit the code generated by
// the wForm macro:

mainAppWindow_implementation();
	






// The changeText widget proc will change the label's text.

proc changeText:widgetProc;
var
	aText	:string;
	theText	:string;
	
readonly
	newText	:string :=
		"This is the new text to be assigned to the label1 object. "
		"This one is much longer than the original string "
		"and it will nearly fill up the entire bounding box "
		"(large form) when this text is selected into the "
		"wLabel_t object on the form. It is too long to fit "
		"entirely into the smaller bounding box for the text object.";
	
begin changeText;

	mov( mainAppWindow.label1, esi );
	(type wLabel_t [esi]).a_get_caption();
	mov( eax, aText );
	(type wLabel_t [esi]).get_caption();
	mov( eax, theText );
	
	// Sanity check on the two functions:
	
	assert( str.eq( theText, aText ));
	
	if( str.eq( theText, originalString ) ) then
	
		(type wLabel_t [esi]).set_caption( newText );
		
	else
	
		(type wLabel_t [esi]).set_caption( originalString );
		
	endif;
	
	// Must free the storage allocated by a_get_caption:
	
	str.free( aText );
	
		 
	
end changeText;
	


// The colorText widget proc will change the foreground and background color.

proc colorText:widgetProc;
begin colorText;

	mov( mainAppWindow.label1, esi );
	
	(type wLabel_t [esi]).get_bkgColor();	// Call just to verify it works.
	
	(type wLabel_t [esi]).get_foreColor();
	if( eax = RGB( 0, 0, 0 ) ) then
	
		stdout.put( "Changing label color to yellow/red" nl );
		(type wLabel_t [esi]).set_foreColor( RGB( 255, 255, 0 ) );
		(type wLabel_t [esi]).set_bkgColor( RGB( 255, 0, 0 ) );
		
	else
	
		stdout.put( "Changing label color to black/gray" nl );
		(type wLabel_t [esi]).set_foreColor( RGB( 0, 0, 0 ) );
		(type wLabel_t [esi]).set_bkgColor( howl.bkgColor_g );
		
	endif;
	
end colorText;
	


// The resizeText widget proc will resize label1 between widths 150 and 200.

proc resizeText:widgetProc;
begin resizeText;

	mov( mainAppWindow.label1, esi );
	(type wLabel_t [esi]).get_width();
	if( eax = 200 ) then
	
		stdout.put( "Resizing label to width/height 150" nl );
		(type wLabel_t [esi]).resize( 150, 150 );
		
	else
	
		stdout.put( "Resizing label to width/height 200" nl );
		(type wLabel_t [esi]).resize( 200, 200 );
		
	endif;
	
end resizeText;
	


// The moveText widget proc will move label 
// between y positions 10 and 40.

proc moveText:widgetProc;
begin moveText;

	mov( mainAppWindow.label1, esi );
	(type wLabel_t [esi]).get_y();
	if( eax = 10 ) then
	
		stdout.put( "Moving label to y-position 40" nl );
		(type wLabel_t [esi]).set_y( 40 );
		
	else
	
		stdout.put( "Moving label to y-position 10" nl );
		(type wLabel_t [esi]).set_y( 10 );
		
	endif;
	
end moveText;
	


// The hideShowText widget proc will hide and show label1.

proc hideShowText:widgetProc;
begin hideShowText;

	mov( thisPtr, esi );
	if( mainAppWindow.showState ) then
	
		(type wPushButton_t [esi]).set_text( "Hide text" );
		mov( false, mainAppWindow.showState );
		stdout.put( "Showing label 1" nl );
		
		mov( mainAppWindow.label1, esi );
		(type wLabel_t [esi]).show();
		
	else		 
	
		(type wPushButton_t [esi]).set_text( "Show text" );
		mov( true, mainAppWindow.showState );
		stdout.put( "Hiding label 1" nl );
		
		mov( mainAppWindow.label1, esi );
		(type wLabel_t [esi]).hide();
				
	endif;	
	
end hideShowText;
	



	
	

// Here's the onClick event handler for our quit button on the form.
// This handler will simply quit the application:

proc onQuit:widgetProc;
begin onQuit;

	// Quit the app:
	
	w.PostQuitMessage( 0 );

end onQuit;





// We'll use the main application form's onCreate method to initialize
// the various buttons on the form.
//
// This could be done in appStart, but better to leave appStart mainly
// as boilerplate code. Also, putting this code here allows us to use
// "this" to access the mainAppWindow fields (a minor convenience).
		
method mainAppWindow_t.onCreate;
begin onCreate;

	// Initialize the showState data field:
		
	mov( false, this.showState );
	
	

end onCreate;

	
	
///////////////////////////////////////////////////////////////////////////////
//
//
// The following is mostly boilerplate code for all apps (about the only thing
// you would change is the size of the main app's form)
//
//
///////////////////////////////////////////////////////////////////////////////
//	
// When the main application window closes, we need to terminate the 
// application. This overridden method handles that situation.  Notice the
// override declaration for onClose in the wForm declaration given earlier.
// Without that, mainAppWindow_t would default to using the wVisual_t.onClose
// method (which does nothing). 
		
method mainAppWindow_t.onClose;
begin onClose;
	
	// Tell the winmain main program that it's time to terminate.
	// Note that this message will (ultimately) cause the appTerminate
	// procedure to be called.
	
	w.PostQuitMessage( 0 );
	
	
end onClose;

			   
  
			   
   
// When the application begins execution, the following procedure
// is called.  This procedure must create the main
// application window in order to kick off the execution of the
// GUI application:
  
procedure appStart;
begin appStart;

	push( esi );
	
	// Create the main application window:
	
	mainAppWindow.create_mainAppWindow
	(
		applicationName,		// Window title
		w.WS_EX_CONTROLPARENT,	// Need this to support TAB control selection
		w.WS_OVERLAPPEDWINDOW,	// Style 
		NULL,					// No parent window 									
		formX,					// x-coordinate for window. 
		formY,					// y-coordinate for window.
		formW,					// Width
		formH,					// Height
		howl.bkgColor_g,		// Background color
		true					// Make visible on creation 
	);
	mov( esi, pmainAppWindow );	// Save pointer to main window object.
	pop( esi );

end appStart;



// appTerminate-
//
//	Called when the application is quitting, giving the app a chance
// to clean up after itself.
//
// Note that this is called *after* the mainAppWindow_t.onClose method
// executes (indeed, mainAppWindow_t.onClose, by posting the quit message,
// is what actually causes the program to begin terminating, which leads
// to the execution of this procedure).

procedure appTerminate;
begin appTerminate;
	
	// Clean up the main application's form.
	// Note that this will recursively clean up all the widgets on the form.
	
	mainAppWindow.destroy();
	
end appTerminate;


// appException-
//
// Gives the application the opportunity to clean up before
// aborting when an unhandled exception comes along:

procedure appException
( 
	theException	:dword in eax;
	raiseAdrs		:dword in ebx;
	filename		:string in ecx;
	userCode		:dword in edx;
	lineNum			:uns32 in edi 
);
begin appException;

	raise( eax );

end appException;



// The main program for a HOWL application must 
// call the HowlMainApp procedure.

begin label1;

	// Set up the background and transparent colors that the
	// form will use when registering the window_t class:
	
	w.GetSysColor( w.COLOR_MENU );
	mov( eax, howl.bkgColor_g );
	or( $FF00_0000, eax );
	mov( eax, howl.transparent_g );
	w.CreateSolidBrush( howl.bkgColor_g );
	mov( eax, howl.bkgBrush_g );

	// Start the HOWL Framework Main Program:
	
	HowlMainApp();
	
	// Delete the brush we created earlier:
	
	w.DeleteObject( howl.bkgBrush_g );			
				
end label1;
 