unit hlaFuncUnit;

// We want to demonstrate how to call HLA Standard Library
// routines from code that is called from C, so let's include
// the standard library right here.

#include( "stdlib.hhf" )

// Here's the sample function we're going to call from external
// code ("C" in this example) that demonstrates HLA stdlib calls
// and exception handling.

procedure hlaFunc( i:int32 ); @cdecl; @external( "_hlaFunc" );

// These are declarations for procedures that exist in the HLA
// standard library, but are "shrouded" in the sense that there
// aren't corresponding declarations in the stdlib.hhf file (these
// routines generally get called by HLA generated code, and nothing
// else; however, as we have to simulate "HLA generated code" here,
// we have to manually provide these declarations):

procedure BuildExcepts; @external("BuildExcepts__hla_");
procedure HardwareException; @external( "HardwareException__hla_" );
procedure DefaultExceptionHandler; @external( "DefaultExceptionHandler__hla_" );

// The following are forward/external declarations for procedures
// that are normally created by the HLA compiler when you write
// a "main program." As we are not using an HLA main program here,
// we have to manually create these procedures.

procedure HWexcept; @external( "HWexcept__hla_" );
procedure DfltExHndlr; @external( "DfltExHndlr__hla_" );
procedure QuitMain; @external( "QuitMain__hla_" );

// The following is a Win32 API function this code calls:

procedure ExitProcess( rtnCode:dword ); @external( "_ExitProcess@4" );


// The following are some global, public, variables that the
// HLA exception handling run-time system expect the compiler
// to create for the HLA main program. Once again, as we are not
// writing an HLA main program here, we have to manually supply
// these objects:

static
	MainPgmVMT:	dword:= &QuitMain;

	MainPgmCoroutine: 	dword[ 5 ]; @external( "MainPgmCoroutine__hla_" );
	MainPgmCoroutine: 	dword; @nostorage;
						dword &MainPgmVMT, 0, 0;
	SaveSEHPointer:		dword; @nostorage; // Still part of MainPgmCoroutine...
						dword 0, 0;

// HLA main programs provide a "QuitMain" external label that
// exception handling code can when the exception causes the
// program to abort. This label immediately terminates program
// execution. As we are not writing an HLA main program, the HLA
// compiler does not provide this code for us, we have to supply
// it manually. You can do anything you want here, as long as you
// cause the *whole* program to terminate execution. This particular
// example simply calls ExitProcess and returns a termination code
// of one (which you can change to anything you want; non-zero usually
// indicates successful completion of the application, but this label
// normally gets called when the application aborts because of some
// exception, so returning zero isn't typical in this particular case.

procedure QuitMain;
begin QuitMain;

	ExitProcess( 1 );

end QuitMain;


// HWexcept is where the OS would normally transfer control
// when an x86 exception occurs. This procedure is normally
// written by the HLA compiler and simply jumps to an
// appropriate handler in the HLA Standard Library.

procedure HWexcept;
begin HWexcept;

	jmp	HardwareException;

end HWexcept;

// DfltExHndlr is where the exception handling code transfers
// control when an HLA exception occurs. This is normally
// written by the compiler (to allow the compiler to choose
// between the full and short forms of the default exception
// handler). NOTE: the following code invokes the *full*
// exception handler (lots of meaningful messages, at the
// expense of the space needed for all those messages).

procedure DfltExHndlr;
begin DfltExHndlr;

	jmp	DefaultExceptionHandler;

end DfltExHndlr;


// Here's the HLA code we're going to call from C that
// demonstrates exception handling without an HLA main program.

procedure hlaFunc( i:int32 );
var
	s:string;

begin hlaFunc;

	// Upon entry into any HLA code that needs exception support,
	// we have to set up the structured exception handling record
	// for HLA:

	call BuildExcepts;

	// Okay, here's the code we're going to execute that uses
	// exceptions, calls HLA stdlib routines, etc., even though
	// caller is not an HLA program:

	try

		stdout.put( "stdout.put called from HLA code, i = ", i, nl );
		raise( 5 );

	  exception( 5 );
		stdout.put( "Exception handled by HLA code" nl );

	endtry;


	// One more demonstration, this time with an exception
	// occurring deep down inside an HLA Standard Library routine:

	try
		stralloc( 16 );
		mov( eax, s );
		str.cpy( "Hello World", s );
		stdout.put( "Successfully copied 'Hello World' to s: ", s, nl );
		str.cpy( "0123456789abcdefghijklmnop", s );
		stdout.put( "Shouldn't get here" nl );

	  anyexception

		stdout.put( "Exception code: ", eax, nl );
		ex.printExceptionError();

	endtry;
	strfree( s );
	stdout.put( "Returning to C code" nl );

	// Before we leave, we have to clean up the SEH record
	// pushed on the stack by BuildExcepts. Actually, the
	// return will clean this up, but we do need to restore
	// the system's SEH pointer before returning.

	mov( SaveSEHPointer, eax );

	// The following actually *could* be done in straight
	// HLA code, but this is easier.

	#asm
		mov fs:[0], eax
	#endasm

end hlaFunc;

end hlaFuncUnit;
