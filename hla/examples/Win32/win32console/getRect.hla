unit consoleUnit;
#include( "stdout.hhf" );
#include( "win32cons.hhf" );
#include( "excepts.hhf" );


// getRect-
//
//	Grabs a rectangular block of text from the screen
//	and stores it into buf.  The buffer must be large enough
//	to hold the text [ (bottom-top+1) * (right-left+1) bytes].

procedure win32cons.getRect
( 
		top:word; 
		left:word; 
		bottom:word; 
		right:word;
	var	buf:byte
);	@nodisplay;

var
	csbi: 		win.CONSOLE_SCREEN_BUFFER_INFO;
	charsRead:	dword;
	xyposn:		win.COORD;
	handle:		dword;
	
begin getRect;

	pushad();
	
	mov( stdout.handle(), handle );

	// Verify that the coordinates are within range:
	
	win32cons.info( csbi );
	if
	(#{
		mov( top, ax );
		cmp( ax, bottom );
		ja true;
		cmp( ax, csbi.dwSize.Y );
		jae true;
		mov( left, ax );
		cmp( ax, right );
		ja true;
		cmp( ax, csbi.dwSize.X );
		jb false;
	}#) then
		raise( ex.ValueOutOfRange );
		
	endif;

	
	// Set up the coordinates where we will grab the string.
	
	mov( top, cx );
	mov( cx, xyposn.Y );
	mov( left, cx );
	mov( cx, xyposn.X );
	
	// Loop row by row, grab and store the data:
	
	mov( buf, ebx );		// Start storing data here.
	movzx( right, eax );	// Compute # of chars/row.
	sub( left, ax );
	inc( ax );
	forever
	
		mov( xyposn.Y, cx );
		breakif( cx > bottom );
		push( eax );
		push( ebx );		
		win.ReadConsoleOutputCharacter
		( 
			charsRead,
			xyposn,
			eax,
			(type byte [ebx]),
			handle 
		);
		pop( ebx );
		pop( eax );
		add( eax, ebx );
		inc( xyposn.Y );

	endfor;
	popad();
	
end getRect;



end consoleUnit;