unit consoleUnit;
#include( "stdout.hhf" );
#include( "win32cons.hhf" );
#include( "excepts.hhf" );
#include( "memory.hhf" );


// a_getRect-
//
//	Just like getRect except this code automatically
//	allocates storage for the block on the heap.
//	This routine returns a pointer to the allocated block
//	in the EAX register.

procedure win32cons.a_getRect
( 
	top:word; 
	left:word; 
	bottom:word; 
	right:word
);	@nodisplay; 

var
	csbi: 		win.CONSOLE_SCREEN_BUFFER_INFO;
	charsRead:	dword;
	xyposn:		win.COORD;
	handle:		dword;
	
begin a_getRect;

	push( ebx );
	push( ecx );
	push( edx );
	push( esi );
	push( edi );
	
	mov( stdout.handle(), handle );

	// Verify that the coordinates are within range:
	
	win32cons.info( csbi );
	if
	(#{
		mov( top, ax );
		cmp( ax, bottom );
		ja true;
		cmp( ax, csbi.dwSize.Y );
		jae true;
		mov( left, ax );
		cmp( ax, right );
		ja true;
		cmp( ax, csbi.dwSize.X );
		jb false;
	}#) then

		raise( ex.ValueOutOfRange );
		
	endif;

	
	// Set up the coordinates where we will grab the string.
	
	mov( top, cx );
	mov( cx, xyposn.Y );
	mov( left, cx );
	mov( cx, xyposn.X );

	// Allocate storage for the buffer:

	movzx( right, eax );
	sub( left, ax );
	inc( eax );

	movzx( bottom, ebx );
	sub( top, bx );
	inc( ebx );

	intmul( ebx, eax );
	malloc( eax );
	push( eax );
	
	// Loop row by row, grab and store the data:
	
	mov( eax, ebx );		// Start storing data here.
	movzx( right, eax );	// Compute # of chars/row.
	sub( left, ax );
	inc( ax );
	forever
	
		mov( xyposn.Y, cx );
		breakif( cx > bottom );
		push( eax );
		push( ebx );		
		win.ReadConsoleOutputCharacter
		( 
			charsRead,
			xyposn,
			eax,
			(type byte [ebx]),
			handle 
		);
		pop( ebx );
		pop( eax );
		add( eax, ebx );
		inc( xyposn.Y );

	endfor;

	pop( eax );	// Retrieve pointer to buffer.
	pop( edi );
	pop( esi );
	pop( edx );
	pop( ecx );
	pop( ebx );
		
end a_getRect;



end consoleUnit;