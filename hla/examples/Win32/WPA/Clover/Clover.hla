// Clover.hla-
//
//	Program that demonstrates the use of the clipping by drawing a
// simple "Clover" pattern.
//
// Note: this is a unit because it uses the WinMail library module that
//		 provides a win32 main program for us.

unit Clover;

#includeonce( "rand.hhf" )
#includeonce( "memory.hhf" )
#includeonce( "math.hhf" )
#includeonce( "w.hhf" )
#includeonce( "wpa.hhf" )
#includeonce( "winmain.hhf" )

?@NoDisplay := true;
?@NoStackAlign := true;
	
static
	ClientSizeX			:int32 := 0;	// Size of the client area
	ClientSizeY			:int32 := 0;	//  where we can paint.
	
readonly

	ClassName	:string := "CloverWinClass";		// Window Class Name
	AppCaption	:string := "Clover Program";		// Caption for Window

	
	// The dispatch table:
	//
	//	This table is where you add new messages and message handlers
	//	to the program.  Each entry in the table must be a MsgProcPtr_t
	//	record containing two entries: the message value (a constant,
	//	typically one of the w.WM_***** constants found in windows.hhf)
	//	and a pointer to a "MsgProcPtr_t" procedure that will handle the
	//	message.
 
	
	Dispatch	:MsgProcPtr_t; @nostorage;

		MsgProcPtr_t	
			MsgProcPtr_t:[ w.WM_DESTROY, &QuitApplication	],
			MsgProcPtr_t:[ w.WM_PAINT,   &Paint				],
			MsgProcPtr_t:[ w.WM_SIZE,	 &Size				],
			
			// Insert new message handler records here.
			
			MsgProcPtr_t:[ 0, NULL ];	// This marks the end of the list.
			

	
/**************************************************************************/
/*          W I N M A I N   S U P P O R T   C O D E				          */
/**************************************************************************/

// initWC - We don't have any initialization to do, so just return:

procedure initWC; @noframe;
begin initWC;

	ret();

end initWC;

// appCreateWindow-	the default window creation code is fine, so just
//					call defaultCreateWindow.

procedure appCreateWindow; @noframe;
begin appCreateWindow;

	jmp defaultCreateWindow;

end appCreateWindow;



// appException-
//
// Gives the application the opportunity to clean up before
// aborting when an unhandled exception comes along:

procedure appException( theException:dword in eax );
begin appException;

	raise( eax );

end appException;



// This is the custom message translation procedure.
// We're not doing any custom translation, so just return EAX=0
// to tell the caller to go ahead and call the default translation
// code.

procedure LocalProcessMsg( var lpmsg:w.MSG ); 
begin LocalProcessMsg;

	xor( eax, eax );

end LocalProcessMsg;
			
	
/**************************************************************************/
/*          A P P L I C A T I O N   S P E C I F I C   C O D E	          */
/**************************************************************************/


// QuitApplication:
//
//	This procedure handles the w.WM_DESTROY message.
//	It tells the application to terminate.  This code sends
//	the appropriate message to the main program's message loop
//	that will cause the application to terminate.
	
procedure QuitApplication( hwnd: dword; wParam:dword; lParam:dword );
begin QuitApplication;

	w.PostQuitMessage( 0 );

end QuitApplication;




// Paint:
//
//	This procedure handles the w.WM_PAINT message.

procedure Paint( hwnd: dword; wParam:dword; lParam:dword );
var
	hdc			:dword;			// Handle to video display device context.
	ps			:w.PAINTSTRUCT;	// Used while painting text.
	leafs		:dword[4];		// Handles for our four-leaf clover
	Clover		:dword;			// Four-leaf clover region handle.
	temp1		:dword;
	temp2		:dword;
	x			:dword;
	y			:dword;

begin Paint;


	// Message handlers must preserve EBX, ESI, and EDI.
	// (They've also got to preserve EBP, but HLA's procedure
	// entry code already does that.)
	
	push( ebx );
	push( esi );
	push( edi );
	
	// Create the four regions we're going to use as a mask:
	
	// Region one - ellipse specified by (0, y/4):(x/2, y*3/4)
	
	mov( ClientSizeX, esi );
	shr( 1, esi );		// 1/2 ClientSizeX
	
	mov( ClientSizeY, edi );
	shr( 1, edi );		// 1/2 ClientSizeY
	mov( edi, eax );
	shr( 1, eax );		// 1/4 ClientSizeY
	add( eax, edi );	// 3/4 ClientSizeY
	
	w.CreateEllipticRgn( 0, eax, esi, edi );
	mov( eax, leafs[0*4] );
	
	// Region two - ellipse specified by (x/2, y/4):(x, y*3/4)
	
	mov( ClientSizeY, edi );
	shr( 1, edi );		// 1/2 ClientSizeY
	mov( edi, eax );
	shr( 1, eax );		// 1/4 ClientSizeY
	add( eax, edi );	// 3/4 ClientSizeY
	
	w.CreateEllipticRgn( esi, eax, ClientSizeX, edi );
	mov( eax, leafs[1*4] );
	
	// Region three - ellipse specified by (x/4, 0):(x*3/4, y/2)
	
	mov( ClientSizeY, esi );
	shr( 1, esi );		// 1/2 ClientSizeY
	
	mov( ClientSizeX, edi );
	shr( 1, edi );		// 1/2 ClientSizeX
	mov( edi, eax );
	shr( 1, eax );		// 1/4 ClientSizeX
	add( eax, edi );	// 3/4 ClientSizeX
	
	w.CreateEllipticRgn( eax, 0, edi, esi );
	mov( eax, leafs[2*4] );
	
	// Region four - ellipse specified by (x/4, y/2):(x*3/4, y)
	
	mov( ClientSizeX, edi );
	shr( 1, edi );		// 1/2 ClientSizeX
	mov( edi, eax );
	shr( 1, eax );		// 1/4 ClientSizeX
	add( eax, edi );	// 3/4 ClientSizeX
	
	w.CreateEllipticRgn( eax, esi, edi, ClientSizeY );
	mov( eax, leafs[3*4] );
	
	// Combine the regions using the XOR combination:
	
	w.CreateRectRgn( 0, 0, 0, 0 );
	mov( eax, temp1 );
	w.CreateRectRgn( 0, 0, 0, 0 );
	mov( eax, temp2 );
	w.CreateRectRgn( 0, 0, 0, 0 );
	mov( eax, Clover );
	
	w.CombineRgn( temp1, leafs[0*4], leafs[1*4], w.RGN_OR );
	w.CombineRgn( temp2, leafs[2*4], leafs[3*4], w.RGN_OR );
	w.CombineRgn( Clover, temp1, temp2, w.RGN_XOR );
	

	// Note that all GDI calls must appear within a 
	// BeginPaint..EndPaint pair.
	
	BeginPaint( hwnd, ps, hdc );

		// Select the Clover region in to use as our clipping rectangle:
		
		w.SelectClipRgn( hdc, Clover );
		
		// Now draw a sequence of lines from the center of the display
		// to the edges in order to demonstrate the clipping:
		
		mov( ClientSizeX, eax );	// Compute the coordinate of the
		shr( 1, eax );				//  screen's center point.
		mov( eax, x );
		mov( ClientSizeY, eax );
		shr( 1, eax );
		mov( eax, y );
		
		// Draw the lines that intersect the top of the window:
		
		for( mov( 0, esi ); esi < ClientSizeX; add( 4, esi )) do
		
			MoveToEx( x, y, NULL );
			LineTo( esi, 0 );
			
		endfor;
			
		// Draw the lines that intersect the right side of the window:
		
		for( mov( 0, esi ); esi < ClientSizeY; add( 4, esi )) do
		
			MoveToEx( x, y, NULL );
			LineTo( ClientSizeX, esi );
			
		endfor;
			
		// Draw the lines that intersect the bottom of the window:
		
		for( mov( 0, esi ); esi < ClientSizeX; add( 4, esi )) do
		
			MoveToEx( x, y, NULL );
			LineTo( esi, ClientSizeY );
			
		endfor;
			
		// Draw the lines that intersect the left side of the window:
		
		for( mov( 0, esi ); esi < ClientSizeY; add( 4, esi )) do
		
			MoveToEx( x, y, NULL );
			LineTo( 0, esi );
			
		endfor;
			
			
				
	EndPaint;

	
	pop( edi );
	pop( esi );
	pop( ebx );

end Paint;


// Size-
//
//	This procedure handles the w.WM_SIZE message
//	Basically, it just saves the window's size so
//	the Paint procedure knows when a line goes out of
//	bounds.
//
//	L.O. word of lParam contains the new X Size
//	H.O. word of lParam contains the new Y Size

procedure Size( hwnd: dword; wParam:dword; lParam:dword );
begin Size;

	// Convert new X size to 32 bits and save:

	movzx( (type word lParam), eax );
	mov( eax, ClientSizeX );

	// Convert new Y size to 32 bits and save:

	movzx( (type word lParam[2]), eax );
	mov( eax, ClientSizeY );
	
	xor( eax, eax ); // return success.
	

end Size;
				
end Clover;
 