// Rectangles.hla-
//
//	Simple Application the demonstrates line drawing.

unit Rectangles;
#include( "rand.hhf" )
#include( "w.hhf" )
#include( "wpa.hhf" )
#includeonce( "winmain.hhf" )

?@NoDisplay := true;
?@NoStackAlign := true;


static
	ClientSizeX			:int32 := 0;	// Size of the client area
	ClientSizeY			:int32 := 0;	//  where we can paint.
	
	
readonly

	ClassName	:string := "RectanglesWinClass";	// Window Class Name
	AppCaption	:string := "Rectangles Program";	// Caption for Window

	
	// The dispatch table:
	//
	//	This table is where you add new messages and message handlers
	//	to the program.  Each entry in the table must be a MsgProcPtr_t
	//	record containing two entries: the message value (a constant,
	//	typically one of the w.WM_***** constants found in windows.hhf)
	//	and a pointer to a "MsgProcPtr_t" procedure that will handle the
	//	message.
 
	
	Dispatch	:MsgProcPtr_t; @nostorage;

		MsgProcPtr_t	
			MsgProcPtr_t:[ w.WM_DESTROY, &QuitApplication	],
			MsgProcPtr_t:[ w.WM_PAINT,   &Paint				],
			MsgProcPtr_t:[ w.WM_SIZE,	 &Size				],
			
			// Insert new message handler records here.
			
			MsgProcPtr_t:[ 0, NULL ];	// This marks the end of the list.
			
	
			
	
/**************************************************************************/
/*          W I N M A I N   S U P P O R T   C O D E				          */
/**************************************************************************/

// initWC - We don't have any initialization to do, so just return:

procedure initWC; @noframe;
begin initWC;

	ret();

end initWC;

// appCreateWindow-	the default window creation code is fine, so just
//					call defaultCreateWindow.

procedure appCreateWindow; @noframe;
begin appCreateWindow;

	jmp defaultCreateWindow;

end appCreateWindow;



// appException-
//
// Gives the application the opportunity to clean up before
// aborting when an unhandled exception comes along:

procedure appException( theException:dword in eax );
begin appException;

	raise( eax );

end appException;



// This is the custom message translation procedure.
// We're not doing any custom translation, so just return EAX=0
// to tell the caller to go ahead and call the default translation
// code.

procedure LocalProcessMsg( var lpmsg:w.MSG ); 
begin LocalProcessMsg;

	xor( eax, eax );

end LocalProcessMsg;

/**************************************************************************/
/*          A P P L I C A T I O N   S P E C I F I C   C O D E	          */
/**************************************************************************/

// QuitApplication:
//
//	This procedure handles the w.WM_DESTROY message.
//	It tells the application to terminate.  This code sends
//	the appropriate message to the main program's message loop
//	that will cause the application to terminate.
	
procedure QuitApplication( hwnd: dword; wParam:dword; lParam:dword );
begin QuitApplication;

	w.PostQuitMessage( 0 );

end QuitApplication;




// Paint:
//
//	This procedure handles the w.WM_PAINT message.

procedure Paint( hwnd: dword; wParam:dword; lParam:dword );
var
	hdc			:dword;			// Handle to video display device context
	ps			:w.PAINTSTRUCT;	// Used while painting text.

static
	hBrush		:dword;						// Brush handle.
	blackBrush	:dword;						// Handle for the stock white brush
	lastRGB		:w.COLORREF;				// Last color we used
	theRect		:w.RECT;					// Rectangle Coordinates
	
begin Paint;

	// Message handlers must preserve EBX, ESI, and EDI.
	// (They've also got to preserve EBP, but HLA's procedure
	// entry code already does that.)
	
	push( ebx );
	push( esi );
	push( edi );
	
	
	// Get the stock black brush object so we outline the rectangles
	// we draw:
	
	w.GetStockObject( w.BLACK_BRUSH );
	mov( eax, blackBrush );
	
	// Note that all GDI calls must appear within a 
	// BeginPaint..EndPaint pair.
	
	BeginPaint( hwnd, ps, hdc );

		rand.range( 0, $FF_FFFF ); // Generate a random RGB value.
		mov( eax, lastRGB );


		// Create a brush with the current color we're using:

		w.CreateSolidBrush( lastRGB );
		mov( eax, hBrush );

		// Draw a random rectangle using the brush we just created:
		
		rand.range( 0, ClientSizeX );
		mov( eax, theRect.left );
		rand.range( 0, ClientSizeY );
		mov( eax, theRect.top );
		
		mov( ClientSizeX, eax );
		sub( theRect.left, eax );
		rand.range( 0, eax );
		mov( eax, theRect.right );
		
		mov( ClientSizeY, eax );
		sub( theRect.top, eax );
		rand.range( 0, eax );
		mov( eax, theRect.bottom );
		
		FillRect( theRect, hBrush );
		FrameRect( theRect, blackBrush );
		
		// Delete the brush we created:
		
		w.DeleteObject( hBrush );
							
	EndPaint;

	// Force Windows to redraw this window without erasing
	// it so that we get constant feedback in the window:

	w.InvalidateRect( hwnd, NULL, false ); 
	
	pop( edi );
	pop( esi );
	pop( ebx );

end Paint;


// Size-
//
//	This procedure handles the w.WM_SIZE message
//	Basically, it just saves the window's size so
//	the Paint procedure knows when a line goes out of
//	bounds.
//
//	L.O. word of lParam contains the new X Size
//	H.O. word of lParam contains the new Y Size

procedure Size( hwnd: dword; wParam:dword; lParam:dword );
begin Size;

	// Convert new X size to 32 bits and save:

	movzx( (type word lParam), eax );
	mov( eax, ClientSizeX );

	// Convert new Y size to 32 bits and save:

	movzx( (type word lParam[2]), eax );
	mov( eax, ClientSizeY );
	
	xor( eax, eax ); // return success.
	

end Size;
end Rectangles;
