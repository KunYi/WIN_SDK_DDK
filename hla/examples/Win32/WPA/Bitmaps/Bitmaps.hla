// Bitmaps.hla-
//
//	Program that demonstrates how to use a simple bitmap.
//
// Note: this is a unit because it uses the WinMail library module that
//		 provides a win32 main program for us.

unit Bitmaps;

#includeonce( "rand.hhf" )
#includeonce( "memory.hhf" )
#includeonce( "math.hhf" )
#includeonce( "w.hhf" )
#includeonce( "wpa.hhf" )
#includeonce( "winmain.hhf" )

?@NoDisplay := true;
?@NoStackAlign := true;
	
static
	ClientSizeX			:int32 := 0;	// Size of the client area
	ClientSizeY			:int32 := 0;	//  where we can paint.
	
readonly

	ClassName	:string := "BitmapsWinClass";		// Window Class Name
	AppCaption	:string := "Bitmaps Program";		// Caption for Window

	
	// The dispatch table:
	//
	//	This table is where you add new messages and message handlers
	//	to the program.  Each entry in the table must be a MsgProcPtr_t
	//	record containing two entries: the message value (a constant,
	//	typically one of the w.WM_***** constants found in windows.hhf)
	//	and a pointer to a "MsgProcPtr_t" procedure that will handle the
	//	message.
 
	
	Dispatch	:MsgProcPtr_t; @nostorage;

		MsgProcPtr_t	
			MsgProcPtr_t:[ w.WM_DESTROY, &QuitApplication	],
			MsgProcPtr_t:[ w.WM_PAINT,   &Paint				],
			MsgProcPtr_t:[ w.WM_SIZE,	 &Size				],
			
			// Insert new message handler records here.
			
			MsgProcPtr_t:[ 0, NULL ];	// This marks the end of the list.
			

	
/**************************************************************************/
/*          W I N M A I N   S U P P O R T   C O D E				          */
/**************************************************************************/

// initWC - We don't have any initialization to do, so just return:

procedure initWC; @noframe;
begin initWC;

	ret();

end initWC;

// appCreateWindow-	the default window creation code is fine, so just
//					call defaultCreateWindow.

procedure appCreateWindow; @noframe;
begin appCreateWindow;

	jmp defaultCreateWindow;

end appCreateWindow;


// appException-
//
// Gives the application the opportunity to clean up before
// aborting when an unhandled exception comes along:

procedure appException( theException:dword in eax );
begin appException;

	raise( eax );

end appException;




// This is the custom message translation procedure.
// We're not doing any custom translation, so just return EAX=0
// to tell the caller to go ahead and call the default translation
// code.

procedure LocalProcessMsg( var lpmsg:w.MSG ); 
begin LocalProcessMsg;

	xor( eax, eax );

end LocalProcessMsg;
			
	
/**************************************************************************/
/*          A P P L I C A T I O N   S P E C I F I C   C O D E	          */
/**************************************************************************/


// QuitApplication:
//
//	This procedure handles the w.WM_DESTROY message.
//	It tells the application to terminate.  This code sends
//	the appropriate message to the main program's message loop
//	that will cause the application to terminate.
	
procedure QuitApplication( hwnd: dword; wParam:dword; lParam:dword );
begin QuitApplication;

	w.PostQuitMessage( 0 );

end QuitApplication;




// Paint:
//
//	This procedure handles the w.WM_PAINT message.

procedure Paint( hwnd: dword; wParam:dword; lParam:dword );
var
	hBitmap		:dword;			// Handle to hold our bitmap handle.
	hdcMem		:dword;			// Handle for Memory device context.	
	hdc			:dword;			// Handle to video display device context.
	ps			:w.PAINTSTRUCT;	// Used while painting text.
	bmih		:w.BITMAPINFOHEADER;
	
	
begin Paint;


	// Message handlers must preserve EBX, ESI, and EDI.
	// (They've also got to preserve EBP, but HLA's procedure
	// entry code already does that.)
	
	push( ebx );
	push( esi );
	push( edi );
	
	// Fill in the fields of the bitmap info header we're gonna use:
	
	mov( @size( w.BITMAPINFOHEADER), bmih.biSize );
	mov( 100, bmih.biWidth );
	mov( 100, bmih.biHeight );
	mov( 1, bmih.biPlanes );
	mov( 24, bmih.biBitCount );
	mov( 0, bmih.biCompression );
	mov( 0, bmih.biSizeImage );
	mov( 96*2540, bmih.biXPelsPerMeter ); //96 pixels per inch
	mov( 96*2540, bmih.biYPelsPerMeter );
	mov( 0, bmih.biClrUsed );
	mov( 0, bmih.biClrImportant );
	
	

	// Note that all GDI calls must appear within a 
	// BeginPaint..EndPaint pair.
	
	BeginPaint( hwnd, ps, hdc );

		// Create an uninitialized bitmap:
		
		CreateDIBitmap( bmih, 0, NULL, NULL, 0 );
		mov( eax, hBitmap );
		
		// Now create a new device context (memory device context)
		// and give it the same attributes as our bitmap we just created:
		
		w.CreateCompatibleDC( hdc );
		mov( eax, hdcMem );
		w.SelectObject( hdcMem, hBitmap );
		
		//  Okay, let's draw on this bitmap we've created.
		//
		// First, fill the background with 50% gray:
		
		w.SelectObject( hdcMem, w.GetStockObject( w.GRAY_BRUSH ));
		w.Rectangle( hdcMem, 0, 0, 100, 100 );
		
		// Now draw an "X" in the middle of the bitmap:
		
		w.SelectObject( hdcMem, w.GetStockObject( w.WHITE_PEN ));
		w.MoveToEx( hdcMem, 20, 20, NULL );
		w.LineTo( hdcMem, 80, 80 );
		w.MoveToEx( hdcMem, 80, 20, NULL );
		w.LineTo( hdcMem, 20, 80 );
		
		// Copy the bitmap to our display context so we can see it:
		
		w.BitBlt( hdc, 20, 20, 100, 100, hdcMem, 0, 0, w.SRCCOPY );
		
		// Draw the bitmap and stretch it out:
		
		w.StretchBlt
		( 
			hdc, 
			20,	170,	// (x,y) position
			200, 100, 	// width/height
			hdcMem, 	
			0, 0, 		// From (x,y) in bitmap
			100, 100, 	// width/height of bitmap
			w.SRCCOPY 
		);
		w.StretchBlt
		( 
			hdc, 
			220, 20, 
			100, 250, 
			hdcMem, 
			0, 0, 
			100, 100, 
			w.SRCCOPY 
		);
		
		// Delete the memory-based device context we created because
		// we're now done with it:
			
		w.DeleteDC( hdcMem );
		
		// Delete the bitmap object we created, because we're done
		// with it:
		
		w.DeleteObject( hBitmap );	
				
	EndPaint;

	
	pop( edi );
	pop( esi );
	pop( ebx );

end Paint;


// Size-
//
//	This procedure handles the w.WM_SIZE message
//	Basically, it just saves the window's size so
//	the Paint procedure knows when a line goes out of
//	bounds.
//
//	L.O. word of lParam contains the new X Size
//	H.O. word of lParam contains the new Y Size

procedure Size( hwnd: dword; wParam:dword; lParam:dword );
begin Size;

	// Convert new X size to 32 bits and save:

	movzx( (type word lParam), eax );
	mov( eax, ClientSizeX );

	// Convert new Y size to 32 bits and save:

	movzx( (type word lParam[2]), eax );
	mov( eax, ClientSizeY );
	
	xor( eax, eax ); // return success.
	

end Size;
				
end Bitmaps;
 