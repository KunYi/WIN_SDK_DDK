// Bitmaps2.hla-
//
//	A second program that demonstrates how to use a simple bitmap.
//
// Note: this is a unit because it uses the WinMail library module that
//		 provides a win32 main program for us.

unit Bitmaps2;

#includeonce( "rand.hhf" )
#includeonce( "memory.hhf" )
#includeonce( "math.hhf" )
#includeonce( "w.hhf" )
#includeonce( "wpa.hhf" )
#includeonce( "winmain.hhf" )

?@NoDisplay := true;
?@NoStackAlign := true;
	

readonly

	ClassName	:string := "Bitmaps2WinClass";		// Window Class Name
	AppCaption	:string := "Bitmaps2 Program";		// Caption for Window

	
	// The dispatch table:
	//
	//	This table is where you add new messages and message handlers
	//	to the program.  Each entry in the table must be a MsgProcPtr_t
	//	record containing two entries: the message value (a constant,
	//	typically one of the w.WM_***** constants found in windows.hhf)
	//	and a pointer to a "MsgProcPtr_t" procedure that will handle the
	//	message.
 
	
	Dispatch	:MsgProcPtr_t; @nostorage;

		MsgProcPtr_t	
			MsgProcPtr_t:[ w.WM_DESTROY, &QuitApplication	],
			MsgProcPtr_t:[ w.WM_PAINT,   &Paint				],
			
			// Insert new message handler records here.
			
			MsgProcPtr_t:[ 0, NULL ];	// This marks the end of the list.
			

	
/**************************************************************************/
/*          W I N M A I N   S U P P O R T   C O D E				          */
/**************************************************************************/

// initWC - We don't have any initialization to do, so just return:

procedure initWC; @noframe;
begin initWC;

	ret();

end initWC;

// appCreateWindow-	the default window creation code is fine, so just
//					call defaultCreateWindow.

procedure appCreateWindow; @noframe;
begin appCreateWindow;

	jmp defaultCreateWindow;

end appCreateWindow;


// appException-
//
// Gives the application the opportunity to clean up before
// aborting when an unhandled exception comes along:

procedure appException( theException:dword in eax );
begin appException;

	raise( eax );

end appException;



// This is the custom message translation procedure.
// We're not doing any custom translation, so just return EAX=0
// to tell the caller to go ahead and call the default translation
// code.

procedure LocalProcessMsg( var lpmsg:w.MSG ); 
begin LocalProcessMsg;

	xor( eax, eax );

end LocalProcessMsg;
			
	
/**************************************************************************/
/*          A P P L I C A T I O N   S P E C I F I C   C O D E	          */
/**************************************************************************/


// QuitApplication:
//
//	This procedure handles the w.WM_DESTROY message.
//	It tells the application to terminate.  This code sends
//	the appropriate message to the main program's message loop
//	that will cause the application to terminate.
	
procedure QuitApplication( hwnd: dword; wParam:dword; lParam:dword );
begin QuitApplication;

	w.PostQuitMessage( 0 );

end QuitApplication;




// Paint:
//
//	This procedure handles the w.WM_PAINT message.

procedure Paint( hwnd: dword; wParam:dword; lParam:dword );

type
	// Data types we need to support a 256x256 eight-bit bitmap:

	bitmap_t	:byte[256,256];
	pBitmap_t	:pointer to bitmap_t;
	bmHeader_t:
		record
			h		:w.BITMAPINFOHEADER;
			palette	:dword[256];
		endrecord;

var
	hBitmap		:dword;			// Handle to hold our bitmap handle.
	hdcMem		:dword;			// Handle for Memory device context.	
	hdc			:dword;			// Handle to video display device context.
	bmPtr		:pBitmap_t;		// Holds the pointer to the bitmap.
	ps			:w.PAINTSTRUCT;	// Used while painting text.
	bmih		:bmHeader_t;
	
	
begin Paint;


	// Message handlers must preserve EBX, ESI, and EDI.
	// (They've also got to preserve EBP, but HLA's procedure
	// entry code already does that.)
	
	push( ebx );
	push( esi );
	push( edi );
	
	// Fill in the fields of the bitmap info header we're gonna use.
	// Note that we're creating an 8-bit/pixel bitmap here.
	
	mov( @size( w.BITMAPINFOHEADER), bmih.h.biSize );
	mov( 256, bmih.h.biWidth );
	mov( 256, bmih.h.biHeight );
	mov( 1, bmih.h.biPlanes );
	mov( 8, bmih.h.biBitCount );
	mov( 0, bmih.h.biCompression );
	mov( 0, bmih.h.biSizeImage );
	mov( 96*2540, bmih.h.biXPelsPerMeter ); //96 pixels per inch
	mov( 96*2540, bmih.h.biYPelsPerMeter );
	mov( 256, bmih.h.biClrUsed );
	mov( 0, bmih.h.biClrImportant );

	// Fill in the palette with 256 shades of gray. Note that
	// a shade of gray is an RGB value where the R, G, and B
	// values are all the same.

	xor( eax, eax );
	for( mov( 0, ebx ); ebx < 256; inc( ebx )) do
	
		mov( eax, bmih.palette[ ebx*4] );	// Store palette entry.
		add( $01_0101, eax );				// Move on to next shade of gray.

	endfor;

	// Note that all GDI calls must appear within a 
	// BeginPaint..EndPaint pair.
	
	BeginPaint( hwnd, ps, hdc );

		// Create an uninitialized bitmap that Windows allocates.
		// This API call returns a pointer to the bitmap it allocates
		// in the bmPtr variable.

		CreateDIBSection( bmih.h, w.DIB_RGB_COLORS, bmPtr, NULL, 0 );
		mov( eax, hBitmap );

		// If the bitmap is valid, let's use it:

		if( eax <> NULL && bmPtr <> NULL ) then
			
			// Now create a new device context (memory device context)
			// and give it the same attributes as our bitmap we just created:
			
			w.CreateCompatibleDC( hdc );
			mov( eax, hdcMem );
			w.SelectObject( hdcMem, hBitmap );
			w.GdiFlush();
			
			//  Okay, let's draw on this bitmap we've created.
			// This code simply writes incrementing values in
			// both the X and Y directions to create an image
			// that holds a pair of gradients.

			mov( 0, al );
			mov( bmPtr, edi );
			for( mov( 0, edx ); edx < $100; inc( edx )) do

				for( mov( 0, ecx ); ecx < $100; inc( ecx )) do

					// Store one row of the bitmap, incrementing
					// AL is what produces the gradient along the
					// X-axis:

					mov( al, [edi] );		// Store into current pixel.
					inc( edi );				// Move on to next pixel 
					inc( al );				// Increment color value.

				endfor;

				// This increment is what produces the gradient
				// along the Y-axis of the bitmap:

				inc( al );

			endfor;

		endif;

		// Copy the bitmap to our display context so we can see it:
		
		w.BitBlt( hdc, 20, 20, 256, 256, hdcMem, 0, 0, w.SRCCOPY );
		
		
		// Delete the memory-based device context we created because
		// we're now done with it:
			
		w.DeleteDC( hdcMem );
		
		// Delete the bitmap object we created, because we're done
		// with it:
		
		w.DeleteObject( hBitmap );	
				
	EndPaint;

	
	pop( edi );
	pop( esi );
	pop( ebx );

end Paint;				
end Bitmaps2;
 