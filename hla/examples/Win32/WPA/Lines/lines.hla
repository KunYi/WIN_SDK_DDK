// Lines.hla-
//
//	Simple Application the demonstrates line drawing.

program Lines;
#include( "rand.hhf" )
#include( "w.hhf" )
#include( "wpa.hhf" )

?@NoDisplay := true;
?@NoStackAlign := true;


type
	// Message and dispatch table related definitions:
		  
	MsgProc_t:	procedure( hwnd:dword; wParam:dword; lParam:dword );
	
	MsgProcPtr_t:
		record
			
			MessageValue	:dword;
			MessageHndlr	:MsgProc_t;
			
		endrecord;
	



static
	hInstance			:dword;			// "Instance Handle" Windows supplies.

	wc					:w.WNDCLASSEX;	// Our "window class" data.
	msg					:w.MSG;			// Windows messages go here.
	hwnd				:dword;			// Handle to our window.
	
	
	ClientSizeX			:int32 := 0;	// Size of the client area
	ClientSizeY			:int32 := 0;	//  where we can paint.
	
	
readonly

	ClassName	:string := "LinesWinClass";			// Window Class Name
	AppCaption	:string := "Lines Program";			// Caption for Window

	
	// The dispatch table:
	//
	//	This table is where you add new messages and message handlers
	//	to the program.  Each entry in the table must be a MsgProcPtr_t
	//	record containing two entries: the message value (a constant,
	//	typically one of the w.WM_***** constants found in windows.hhf)
	//	and a pointer to a "MsgProcPtr_t" procedure that will handle the
	//	message.
 
	
	Dispatch	:MsgProcPtr_t; @nostorage;

		MsgProcPtr_t	
			MsgProcPtr_t:[ w.WM_DESTROY, &QuitApplication	],
			MsgProcPtr_t:[ w.WM_PAINT,   &Paint				],
			MsgProcPtr_t:[ w.WM_SIZE,	 &Size				],
			
			// Insert new message handler records here.
			
			MsgProcPtr_t:[ 0, NULL ];	// This marks the end of the list.
			
	
			
	
/**************************************************************************/
/*          A P P L I C A T I O N   S P E C I F I C   C O D E	          */
/**************************************************************************/

// QuitApplication:
//
//	This procedure handles the w.WM_DESTROY message.
//	It tells the application to terminate.  This code sends
//	the appropriate message to the main program's message loop
//	that will cause the application to terminate.
	
procedure QuitApplication( hwnd: dword; wParam:dword; lParam:dword );
begin QuitApplication;

	w.PostQuitMessage( 0 );

end QuitApplication;




// Paint:
//
//	This procedure handles the w.WM_PAINT message.

procedure Paint( hwnd: dword; wParam:dword; lParam:dword );
var
	hdc			:dword;			// Handle to video display device context
	ps			:w.PAINTSTRUCT;	// Used while painting text.

static
	hPen		:dword;						// Pen handle.
	OldPen		:dword;						// Old Pen Handle.
	lastRGB		:w.COLORREF;				// Last color we used
	x1			:int32 := 0;
	y1			:int32 := 0;
	x2			:int32 := 25;
	y2			:int32 := 25;
	lastDeltaX1	:int32 := 1;
	lastDeltaY1 :int32 := 1;
	lastDeltaX2 :int32 := 2;
	lastDeltaY2 :int32 := 2;
	changeCntr	:uns32 := 10;

begin Paint;

	// Message handlers must preserve EBX, ESI, and EDI.
	// (They've also got to preserve EBP, but HLA's procedure
	// entry code already does that.)
	
	push( ebx );
	push( esi );
	push( edi );
	
	// Note that all GDI calls must appear within a 
	// BeginPaint..EndPaint pair.
	
	BeginPaint( hwnd, ps, hdc );

		inc( lastRGB ); // Increment the color we're using.

		// If the changeCntr variable counts down to zero, compute new
		// delta values:

		dec( changeCntr );
		if( @z ) then

			rand.range( 1, 100 );
			mov( eax, changeCntr );

			// Compute new (random) values for the lastDelta* variables:

			rand.range( 1, 10 );
			sub( 5, eax );
			mov( eax, lastDeltaX1 );

			rand.range( 1, 10 );
			sub( 5, eax );
			mov( eax, lastDeltaY1 );

			rand.range( 1, 10 );
			sub( 5, eax );
			mov( eax, lastDeltaX2 );

			rand.range( 1, 10 );
			sub( 5, eax );
			mov( eax, lastDeltaY2 );

		endif;
		
		// Compute a new starting X-coordinate for the
		// line we're about to draw (do this by adding
		// the appropriate delta to our current x-coordinate
		// value):

		mov( lastDeltaX1, eax );
		add( x1, eax );
		if( @s ) then

			// If we went off the left edge of the window,
			// then change the direction of travel for the
			// deltaX value:

			neg( lastDeltaX1 );
			add( lastDeltaX1, eax );

		endif;

		// Check to see if we went off the right edge of the window.
		// Reset the direction of deltaX if this happens:

		if( eax > ClientSizeX ) then

			neg( lastDeltaX1 );
			mov( ClientSizeX, eax );
			dec( eax );

		endif;
		mov( eax, x1 );
		
		// Same as the above code, except for the Y coordinate

		mov( lastDeltaY1, eax );
		add( y1, eax );
		if( @s ) then

			neg( lastDeltaY1 );
			add( lastDeltaY1, eax );

		endif;
		if( eax > ClientSizeY ) then

			neg( lastDeltaY1 );
			mov( ClientSizeY, eax );
			dec( eax );

		endif;
		mov( eax, y1 );


		// Same as all the above code, but for the end point
		// (rather than the starting point) of the line:

		mov( lastDeltaX2, eax );
		add( x2, eax );
		if( @s ) then

			neg( lastDeltaX2 );
			add( lastDeltaX2, eax );

		endif;
		if( eax > ClientSizeX ) then

			neg( lastDeltaX2 );
			mov( ClientSizeX, eax );
			dec( eax );

		endif;
		mov( eax, x2 );
		
		mov( lastDeltaY2, eax );
		add( y2, eax );
		if( @s ) then

			neg( lastDeltaY2 );
			add( lastDeltaY2, eax );

		endif;
		if( eax > ClientSizeY ) then

			neg( lastDeltaY2 );
			mov( ClientSizeY, eax );
			dec( eax );

		endif;
		mov( eax, y2 );

		// Create a pen with the current color we're using:

		w.CreatePen( w.PS_SOLID, 0, lastRGB );
		mov( eax, hPen );
		SelectObject( eax );
		mov( eax, OldPen );
		
		// Draw the line:

		MoveToEx( x1, y1, NULL );
		LineTo( x2, y2 );
		
		// Restore the old pen and delete the current one:

		SelectObject( OldPen );
		w.DeleteObject( hPen );
			
	EndPaint;

	// Force Windows to redraw this window without erasing
	// it so that we get constant feedback in the window:

	w.InvalidateRect( hwnd, NULL, false ); 
	
	pop( edi );
	pop( esi );
	pop( ebx );

end Paint;


// Size-
//
//	This procedure handles the w.WM_SIZE message
//	Basically, it just saves the window's size so
//	the Paint procedure knows when a line goes out of
//	bounds.
//
//	L.O. word of lParam contains the new X Size
//	H.O. word of lParam contains the new Y Size

procedure Size( hwnd: dword; wParam:dword; lParam:dword );
begin Size;

	// Convert new X size to 32 bits and save:

	movzx( (type word lParam), eax );
	mov( eax, ClientSizeX );

	// Convert new Y size to 32 bits and save:

	movzx( (type word lParam[2]), eax );
	mov( eax, ClientSizeY );
	
	xor( eax, eax ); // return success.
	

end Size;




/**************************************************************************/
/*                   End of Application Specific Code                     */
/**************************************************************************/




// The window procedure.  
// This is actually a function that returns a return result in
// EAX.  If this function returns zero in EAX, then the event
// loop terminates program execution.

procedure WndProc( hwnd:dword; uMsg:uns32; wParam:dword; lParam:dword );
	@stdcall;

begin WndProc;

	// uMsg contains the current message Windows is passing along to
	// us.  Scan through the "Dispatch" table searching for a handler
	// for this message.  If we find one, then call the associated
	// handler procedure.  If we don't have a specific handler for this
	// message, then call the default window procedure handler function.
		
	mov( uMsg, eax );
	mov( &Dispatch, edx );
	forever
	
		mov( (type MsgProcPtr_t [edx]).MessageHndlr, ecx );
		if( ecx = 0 ) then
		
			// If an unhandled message comes along,
			// let the default window handler process the
			// message.  Whatever (non-zero) value this function
			// returns is the return result passed on to the
			// event loop.
			
			w.DefWindowProc( hwnd, uMsg, wParam, lParam );
			exit WndProc;
			
		
		elseif( eax = (type MsgProcPtr_t [edx]).MessageValue ) then
		
			// If the current message matches one of the values
			// in the message dispatch table, then call the
			// appropriate routine.  Note that the routine address
			// is still in ECX from the test above.
			
			push( hwnd );	// (type tMsgProc ecx)(hwnd, wParam, lParam)
			push( wParam );	//  This calls the associated routine after
			push( lParam );	//  pushing the necessary parameters.
			call( ecx );
			
			sub( eax, eax ); // Return value for function is zero.
			break;
		
		endif;
		add( @size( MsgProcPtr_t ), edx );
		
	endfor;
	
end WndProc;



// Here's the main program for the application.
	
begin Lines;		

	// Get this process' handle:
	
	w.GetModuleHandle( NULL );
	mov( eax, hInstance );
	

	// Set up the window class (wc) object:
	
	mov( @size( w.WNDCLASSEX ), wc.cbSize );
	mov( w.CS_HREDRAW | w.CS_VREDRAW, wc.style );
	mov( &WndProc, wc.lpfnWndProc );
	mov( NULL, wc.cbClsExtra );
	mov( NULL, wc.cbWndExtra );
	mov( w.COLOR_WINDOW+1, wc.hbrBackground );
	mov( NULL, wc.lpszMenuName );
	mov( ClassName, wc.lpszClassName );
	mov( hInstance, wc.hInstance );
	
	// Get the icons and cursor for this application:
	
	w.LoadIcon( NULL, val w.IDI_APPLICATION );
	mov( eax, wc.hIcon );
	mov( eax, wc.hIconSm );
	
	w.LoadCursor( NULL, val w.IDC_ARROW );
	mov( eax, wc.hCursor );
	
	
	// Okay, register this window with Windows so it
	// will start passing messages our way.  Once this
	// is accomplished, create the window and display it.
	
	w.RegisterClassEx( wc );

	w.CreateWindowEx
	( 
		NULL, 
		ClassName, 
		AppCaption, 
		w.WS_OVERLAPPEDWINDOW | w.WS_VSCROLL | 	w.WS_HSCROLL,
		w.CW_USEDEFAULT,
		w.CW_USEDEFAULT,
		w.CW_USEDEFAULT,
		w.CW_USEDEFAULT,
		NULL,
		NULL,
		hInstance,
		NULL
	);
	mov( eax, hwnd );
	
	w.ShowWindow( hwnd, w.SW_SHOWNORMAL );
	w.UpdateWindow( hwnd );
	
	// Here's the event loop that processes messages
	// sent to our window.  On return from GetMessage,
	// break if EAX contains false and then quit the
	// program.
	
	forever
	
		w.GetMessage( msg, NULL, 0, 0 );
		breakif( !eax );
		w.TranslateMessage( msg );
		w.DispatchMessage( msg );
		
	endfor;

	// The message handling inside Windows has stored
	// the program's return code in the wParam field
	// of the message.  Extract this and return it
	// as the program's return code.
	
	mov( msg.wParam, eax );
	w.ExitProcess( eax );	
				
end Lines;






































































