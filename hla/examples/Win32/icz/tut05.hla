// Iczelion's tutorial #5: A Simple Window

program aSimpleWindow;
#include( "w.hhf" )			// Standard windows stuff.
#include( "strings.hhf" )	// Defines HLA string routines.
#include( "memory.hhf" )	// Defines "NULL" among other things.
#include( "args.hhf" )		// Command line parameter stuff.
#include( "conv.hhf" )


static
	hInstance:		dword;
	CommandLine:	string;
	
readonly

	ClassName:	string := "SimpleWinClass";
	AppName:	string := "Our Third Window";
	


static GetLastError:procedure; external( "__imp__GetLastError@0" );


#macro RGB( red, green, blue );

	xor( eax, eax );
	mov( blue, ah );
	shl( 8, eax );
	mov( green, ah );
	mov( red, al );
	
#endmacro;


// The window procedure.  Since this gets called directly from
// windows we need to explicitly reverse the parameters (compared
// to the standard STDCALL declaration) in order to make HLA's
// Pascal calling convention compatible with Windows.
//
// This is actually a function that returns a return result in
// EAX.  If this function returns zero in EAX, then the event
// loop terminates program execution.

procedure WndProc( lParam:dword; wParam:dword; uMsg:uns32; hWnd:dword );
	@nodisplay;
	
const
	TestString:= "Win32 assembly is great and easy!";
	
var
	hdc:	dword;
	ps:		w.PAINTSTRUCT;
	hfont:	dword;	
	
begin WndProc;


	// If the WM_DESTROY message comes along, then we've
	// got to post a message telling the event loop that
	// it's time to quit the program.  The return value in
	// EAX must be false (zero).  The GetMessage function
	// will return this value to the event loop which is
	// the indication that it's time to quit.
	
	if( uMsg = w.WM_DESTROY ) then
	
		w.PostQuitMessage( 0 );
		
	
	elseif( uMsg = w.WM_PAINT ) then
	
		// When Windows requests that we draw the window,
		// fill in the string in the center of the screen.
		
		w.BeginPaint( hWnd, ps );
		mov( eax, hdc );
		
		w.CreateFont
		(
			24,
			16,
			0,
			0,
			400,
			0,
			0,
			0,
			w.OEM_CHARSET,
			w.OUT_DEFAULT_PRECIS,
			w.CLIP_DEFAULT_PRECIS,
			w.DEFAULT_QUALITY,
			w.DEFAULT_PITCH | w.FF_SCRIPT,
			"script"
		);
		w.SelectObject( hdc, eax );
		mov( eax, hfont );

		RGB( 200,200,50 );
		w.SetTextColor( hdc, eax );

		RGB( 0,0,255 );
		w.SetBkColor( hdc, eax );

		w.TextOut
		( 
			hdc, 
			0, 
			0, 
			TestString, 
			@length( TestString )
		);
		w.SelectObject( hdc, hfont );		
		w.EndPaint( hWnd, ps );
			
		
	
	else
	
		// If a WM_DESTROY message doesn't come along,
		// let the default window handler process the
		// message.  Whatever (non-zero) value this function
		// returns is the return result passed on to the
		// event loop.
		
		w.DefWindowProc( hWnd, uMsg, wParam, lParam );
		exit WndProc;
		
	endif;
	sub( eax, eax );
	
end WndProc;


	
// WinMain-
//
// This is the "main" windows program.  It sets up the
// window and then enters an "event loop" processing
// whatever messages are passed along to that window.
// Since our code is the only code that calls this function,
// we'll use the Pascal calling conventions for the parameters.

procedure WinMain
(
	hInst:dword;
	hPrevInst:	dword;
	CmdLine:	string;
	CmdShow:	dword
);	@nodisplay;

var
	wc:		w.WNDCLASSEX;
	msg:	w.MSG;
	hwnd:	dword;
	
begin WinMain;

	
	// Set up the window class (wc) object:
	
	mov( @size( w.WNDCLASSEX ), wc.cbSize );
	mov( w.CS_HREDRAW | w.CS_VREDRAW, wc.style );
	mov( &WndProc, wc.lpfnWndProc );
	mov( NULL, wc.cbClsExtra );
	mov( NULL, wc.cbWndExtra );
	
	mov( hInstance, wc.hInstance );
	mov( w.COLOR_WINDOW+1, wc.hbrBackground );
	mov( NULL, wc.lpszMenuName );
	mov( ClassName, wc.lpszClassName );
	
	// Get the icons and cursor for this application:
	
	w.LoadIcon( NULL, val w.IDI_APPLICATION );
	mov( eax, wc.hIcon );
	mov( eax, wc.hIconSm );
	
	w.LoadCursor( NULL, val w.IDC_ARROW );
	mov( eax, wc.hCursor );
	
	
	// Okay, register this window with Windows so it
	// will start passing messages our way.  Once this
	// is accomplished, create the window and display it.
	
	w.RegisterClassEx( wc );

	
	w.CreateWindowEx
	( 
		NULL, 
		ClassName, 
		AppName, 
		w.WS_OVERLAPPEDWINDOW,
		w.CW_USEDEFAULT,
		w.CW_USEDEFAULT,
		w.CW_USEDEFAULT,
		w.CW_USEDEFAULT,
		NULL,
		NULL,
		hInst,
		NULL
	);
	mov( eax, hwnd );
	

	w.ShowWindow( hwnd, w.SW_SHOWNORMAL );
	w.UpdateWindow( hwnd );
	
	// Here's the event loop that processes messages
	// sent to our window.  On return from GetMessage,
	// break if EAX contains false and quit the
	// program.
	
	forever
	
		w.GetMessage( msg, NULL, 0, 0 );
		breakif( !eax );
		w.TranslateMessage( msg );
		w.DispatchMessage( msg );
		
	endfor;
	mov( msg.wParam, eax );
	

end WinMain;

	
begin aSimpleWindow;

	// Get this process' handle:
	
	w.GetModuleHandle( NULL );
	mov( eax, hInstance );
	
	// Get a copy of the command line string passed to this code:
	
	mov( arg.cmdLn(), CommandLine );
	

	
	WinMain( hInstance, NULL, CommandLine, w.SW_SHOWDEFAULT );
	
	// WinMain returns a return code in EAX, exit the program
	// and pass along that return code.
	
	w.ExitProcess( eax );	

end aSimpleWindow;