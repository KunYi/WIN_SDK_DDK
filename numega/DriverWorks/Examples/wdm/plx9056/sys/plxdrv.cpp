// plxdrv.cpp
//
// Generated by DriverWizard version DriverStudio 2.7.0 (Build 554)
// Requires Compuware's DriverWorks classes
//

#define VDW_MAIN
#include <vdw.h>
#include "plxdrv.h"
#include "plxdev.h"

POOLTAG DefaultPoolTag('DxlP');
KDebugOnlyTrace t("PlxDriver");

/////////////////////////////////////////////////////////////////////
// Begin INIT section
#pragma code_seg("INIT")

DECLARE_DRIVER_CLASS(PlxDriver, NULL)

/////////////////////////////////////////////////////////////////////
//  PlxDriver::DriverEntry
//
//	Routine Description:
//		This is the first entry point called by the system when the
//		driver is loaded.
// 
//	Parameters:
//		[in] RegistryPath 
//			String used to find driver parameters in the registry.
//
//	Return Value:
//		STATUS_SUCCESS.
//
//	Comments:
//		None
//
NTSTATUS PlxDriver::DriverEntry(PUNICODE_STRING RegistryPath)
{
	t << "PlxDriver::DriverEntry Compiled at " __TIME__ " on " __DATE__ "\n";
	t << RegistryPath << EOL;

	m_Unit = 0;

	return STATUS_SUCCESS;
}

// End INIT section
/////////////////////////////////////////////////////////////////////
#pragma code_seg()

/////////////////////////////////////////////////////////////////////
//  PlxDriver::AddDevice
//
//	Routine Description:
//		Called when the system detects a device for which this
//		driver is responsible.
//
//	Parameters:
//		[in] Pdo
//			Physical Device Object. This is a pointer to a system device
//			object that represents the physical device.
//
//	Return Value:
//		NTSTATUS - Success or failure code.
//
//	Comments:
//		This function creates the Functional Device Object, or FDO. The FDO
//		enables this driver to handle requests for the physical device. 
//
NTSTATUS PlxDriver::AddDevice(PDEVICE_OBJECT Pdo)
{
	t << "PlxDriver::AddDevice\n";

	PlxDevice* pDevice = new (
			NULL,
			FILE_DEVICE_UNKNOWN,
			NULL,
			0,
			DO_DIRECT_IO | DO_POWER_PAGABLE
			)
		PlxDevice(Pdo);

	NTSTATUS status;

	if ( pDevice )
	{
		status = pDevice->ConstructorStatus();

		if ( NT_SUCCESS(status) )
		{
			m_Unit++;
			pDevice->ReportNewDevicePowerState(PowerDeviceD0);
		}
		else
		{
			t << "Error constructing device PlxDevice " << m_Unit << " status " << status << EOL;
			delete pDevice;
		}
	}
	else
	{
		t << "Error creating device PlxDevice " << m_Unit << EOL;
		status = STATUS_INSUFFICIENT_RESOURCES;
	}

	return status;
}
