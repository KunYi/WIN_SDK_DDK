// plxdev.h
//
// Generated by DriverWizard version DriverStudio 2.7.0 (Build 554)
// Requires Compuware's DriverWorks classes
//

#ifndef __PLXDEV_H__
#define __PLXDEV_H__

#include <kplx9056reg.h>
#include <kplx9056.h>

#include "..\plxioctl.h"

// PLX Device Read/Write Mode
typedef enum _PLX9056_MODE
{
	ModeUnspecified = 0,
	ModeDirectSlave,
	ModeBlockDma,
	ModeSGDma
} PLX9056_MODE;

// Maximum number of scatter/gather elements
#define MAX_SG		0x10

////////////////////////////////////////////////////////////////
// PLX Irp Queue
class PlxQueue : public KDriverManagedQueueCsq
{
// Construction
public:
	SAFE_DESTRUCTORS;

	virtual VOID StartIo(KIrp I);
};

////////////////////////////////////////////////////////////////
// PLX Device Class
class PlxDevice : public KPnpDevice
{
	// Constructors
public:
	SAFE_DESTRUCTORS;
	PlxDevice(PDEVICE_OBJECT Pdo);
	~PlxDevice();

	// Member Functions
public:
	/////////////////////////////////////////////////////
	// Irp Handlers
	DEVMEMBER_DISPATCHERS

	virtual NTSTATUS OnStartDevice(KIrp I);
	virtual NTSTATUS OnStopDevice(KIrp I);
	virtual NTSTATUS OnSurpriseRemoval(KIrp I);
	virtual NTSTATUS OnRemoveDevice(KIrp I);
	virtual NTSTATUS DefaultPnp(KIrp I);
	virtual NTSTATUS DefaultPower(KIrp I);
	virtual NTSTATUS OnDevicePowerUp(KIrp I);
	virtual NTSTATUS OnDeviceSleep(KIrp I);

	VOID StartReadWrite(KIrp I);

	/////////////////////////////////////////////////////
	// Program Dma
	void OnDmaReady(KDmaTransfer* pXfer);
	static VOID LinkTo(OnDmaReady)(KDevice* pDevice, KIrp I, KDmaTransfer* pXfer)
	{
		static_cast<PlxDevice*>(pXfer->Context())->OnDmaReady(pXfer);
	}

	/////////////////////////////////////////////////////
	// Interrupt Service Routine and accompanying Dpc
	MEMBER_ISR(PlxDevice, Isr)
	MEMBER_DPC(PlxDevice, DpcForIsr)

protected:
	/////////////////////////////////////////////////////
	// Device Ioctl handlers
	NTSTATUS ReadMailbox(KIrp I);
	NTSTATUS WriteMailbox(KIrp I);

	/////////////////////////////////////////////////////
	// Helper Function to Stop Device and Free Resources
	void FreeResources();

	// Member Data
protected:
	KPnpLowerDevice		m_Lower;							// lower device

	KPlx9056			m_plx;								// plx chip helper class
	bool				m_bAccess;							// true, if we can access plx registers.

	PLX9056_MODE		m_ReadMode;							// controls read method
	PLX9056_MODE		m_WriteMode;						// controls write method

	PlxQueue			m_ReadQueue;						// queue for reads
	PlxQueue			m_WriteQueue;						// queue for writes

	// DMA
	KDmaAdapter			m_ReadAdapter;						// read dma adapter
	KDmaTransfer		m_ReadTransfer;						// read dma transfer
	KCommonDmaBuffer	m_ReadBuffer;						// read common buffer

	KDmaAdapter			m_WriteAdapter;						// write dma adapter
	KDmaTransfer		m_WriteTransfer;					// write dma transfer
	KCommonDmaBuffer	m_WriteBuffer;						// write common buffer
	KDevice*			m_pDummyDevice;						// dummy DEVICE_OBJECT for write dma channel allocation

	KDeferredCall 		m_DPC;								// DPC for ISR

	friend PlxQueue;
};

#endif // __PLXDEV_H__
