// plxcon.cpp
//
// Generated by DriverWizard version DriverStudio 2.7.0 (Build 554)
//
// This console application demonstrates how to open a handle
// to a device in your driver, and communicate with the driver
// using Read, Write, and DeviceIoControl calls, as appropriate.
//
// This test program attempts to open the device using the
// GUID defined in "..\PlxDeviceinterface.h"

#include <stdlib.h>
#include <stdio.h>
#include <windows.h>

#include <initguid.h>
#include "..\plxintf.h"	// Has class GUID definition

#include <winioctl.h>
#include "..\plxioctl.h"

// This function is found in module openintf.cpp
HANDLE OpenByInterface(const GUID* pClassGuid, DWORD instance, PDWORD pError);

// Prototypes
void Usage(void);

void ReadMailbox(ULONG id);
void WriteMailbox(ULONG id, ULONG value);
void ReadAddress();
void WriteAddress(char* sz);

////////////////////////////////////////////////////////////////////////
// Main entry point
//
//
int __cdecl main(int argc, char* argv[])
{
	printf("Test application plxcon starting...\n");

	do 
	{
		if ( argc == 2 )
		{
			if ( _stricmp("-r", argv[1]) == 0 )
			{
				ReadAddress();
				break;
			}
		}
		else if ( argc == 3 )
		{
			if ( _stricmp("-rm", argv[1]) == 0 )
			{
				ReadMailbox(atoi(argv[2]));
				break;
			}
			else if ( _stricmp("-w", argv[1]) == 0 )
			{
				WriteAddress(argv[2]);
				break;
			}
		}
		else if ( argc == 4 )
		{
			if ( _stricmp("-wm", argv[1]) == 0 )
			{
				WriteMailbox(atoi(argv[2]), atoi(argv[3]));
				break;
			}
		}

		Usage();

	} while ( false );

	return 0;
}

////////////////////////////////////////////////////////////////////////
// Usage
//
//		Print a usage message describing arguments to this program
//
void Usage(void)
{
	printf("    -r                      Do a read\n");
	printf("    -w <string>             Do a write\n");
	printf("    -rm <id>                Read a MailBox Register\n");
	printf("    -wm <id> <value>        Write a MailBox Register\n");
}

////////////////////////////////////////////////////////////////////////
// ReadMailbox
//
//		Read Mailbox Register
//
void ReadMailbox(ULONG id)
{
	printf("ReadMailbox %d\n", id);

	DWORD dwError;
	HANDLE hDevice = OpenByInterface(&PLXDEVICE_CLASS_GUID, 0, &dwError);
	if ( hDevice != INVALID_HANDLE_VALUE )
	{
		ULONG	nOutput = 0;
		ULONG	nValue = -1;

		if ( !DeviceIoControl(hDevice, PLX9056_IOCTL_READ_MAILBOX, &id, sizeof(ULONG), &nValue, sizeof(ULONG), &nOutput, NULL) )
		{
			printf("ERROR: DeviceIoControl returns %0x.", GetLastError());
		}
		else
		{
			printf("Mailbox value is %x\n", nValue);
		}

		CloseHandle(hDevice);
	}
	else
	{
		printf("Failed to open a device %0x.\n", dwError);
	}
}

////////////////////////////////////////////////////////////////////////
// WriteMailbox
//
//		Write Mailbox Register
//
void WriteMailbox(ULONG id, ULONG value)
{
	printf("WriteMailbox %d\n", id);

	DWORD dwError;
	HANDLE hDevice = OpenByInterface(&PLXDEVICE_CLASS_GUID, 0, &dwError);
	if ( hDevice != INVALID_HANDLE_VALUE )
	{
		ULONG nOutput = 0;
		ULONG p[2] = {id, value};

		if ( !DeviceIoControl(hDevice, PLX9056_IOCTL_WRITE_MAILBOX, p, 2*sizeof(ULONG), NULL, 0, &nOutput, NULL) )
		{
			printf("ERROR: DeviceIoControl returns %0x.", GetLastError());
		}

		CloseHandle(hDevice);
	}
	else
	{
		printf("Failed to open a device %0x.\n", dwError);
	}
}

////////////////////////////////////////////////////////////////////////
// ReadAddress
//
//		Read Local Memory
//
void ReadAddress()
{
	printf("ReadAddress\n");

	DWORD dwError;
	HANDLE hDevice = OpenByInterface(&PLXDEVICE_CLASS_GUID, 0, &dwError);
	if ( hDevice != INVALID_HANDLE_VALUE )
	{
		ULONG nRead = 0;

		char buffer[0x40];

		memset(buffer, 0, sizeof(buffer));

		if ( ReadFile(hDevice, buffer, sizeof(buffer), &nRead, NULL) )
		{
			printf(buffer);
			printf("\n");
		}
		else
		{
			printf("ERROR: ReadFile returns %0x.", GetLastError());
		}

		CloseHandle(hDevice);
	}
	else
	{
		printf("Failed to open a device %0x.\n", dwError);
	}
}

////////////////////////////////////////////////////////////////////////
// WriteAddress
//
//		Write Local Memory
//
void WriteAddress(char* sz)
{
	printf("WriteAddress\n");

	DWORD dwError;
	HANDLE hDevice = OpenByInterface(&PLXDEVICE_CLASS_GUID, 0, &dwError);
	if ( hDevice != INVALID_HANDLE_VALUE )
	{
		ULONG nWritten = 0;

		if ( !WriteFile(hDevice, sz, (DWORD)(strlen(sz) + 1), &nWritten, NULL) )
		{
			printf("ERROR: WriteFile returns %0x.", GetLastError());
		}

		CloseHandle(hDevice);
	}
	else
	{
		printf("Failed to open a device %0x.\n", dwError);
	}
}
