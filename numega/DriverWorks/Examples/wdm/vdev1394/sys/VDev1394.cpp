// VDev1394.cpp
//
// Generated by DriverWizard version DriverStudio 2.7.0 (Build 554)
// Requires Compuware's DriverWorks classes
//

#define VDW_MAIN
#include <vdw.h>
#include "VDev1394.h"
#include "Vdev1394Device.h"

// Generated by DriverWizard version DriverStudio 2.7.0 (Build 554)

// Set a default 32-bit tag value to be stored with each heap block
// allocated by operator new. Use BoundsChecker to view the memory pool.
// This value can be overridden using the global function SetPoolTag().
POOLTAG DefaultPoolTag('vedV');

// Create the global driver trace object
// TODO:	Use KDebugOnlyTrace if you want trace messages
//			to appear only in debug builds.  Use KTrace if
//			you want trace messages to always appear.	
KDebugOnlyTrace t("VDev1394");

/////////////////////////////////////////////////////////////////////
// Begin INIT section
#pragma code_seg("INIT")

DECLARE_DRIVER_CLASS(VDev1394, NULL)

/////////////////////////////////////////////////////////////////////
//  VDev1394::DriverEntry
//
//	Routine Description:
//		This is the first entry point called by the system when the
//		driver is loaded.
// 
//	Parameters:
//		RegistryPath - String used to find driver parameters in the
//			registry.  To locate VDev1394 look for:
//			HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\VDev1394
//
//	Return Value:
//		NTSTATUS - Return STATUS_SUCCESS if no errors are encountered.
//			Any other indicates to the system that an error has occured.
//
//	Comments:
//

NTSTATUS VDev1394::DriverEntry(PUNICODE_STRING RegistryPath)
{
	t << "In DriverEntry Compiled at " __TIME__ " on " __DATE__ "\n";

	return STATUS_SUCCESS;
	UNREFERENCED_PARAMETER(RegistryPath);
}

// End INIT section
/////////////////////////////////////////////////////////////////////
#pragma code_seg()

/////////////////////////////////////////////////////////////////////
//  VDev1394::AddDevice
//
//	Routine Description:
//		Called when the system detects a device for which this
//		driver is responsible.
//
//	Parameters:
//		Pdo - Physical Device Object. This is a pointer to a system device
//			object that represents the physical device.
//
//	Return Value:
//		NTSTATUS - Success or failure code.
//
//	Comments:
//		This function creates the Functional Device Object, or FDO. The FDO
//		enables this driver to handle requests for the physical device. 
//

NTSTATUS VDev1394::AddDevice(PDEVICE_OBJECT Pdo)
{
	t << "VDev1394::AddDevice\n";

    // Create the device object. Note that we used a form of "placement" new,
	// that is a member operator of KDevice.  This form will use storage
	// allocated by the system in the device object's device to store our
	// class instance.
	VDev1394Device * pDevice = new (
			NULL,
			FILE_DEVICE_UNKNOWN,
			NULL,
			0,
			DO_DIRECT_IO | DO_POWER_PAGABLE
			)
		VDev1394Device(Pdo);

	NTSTATUS status;

	if ( pDevice )
	{
		status = pDevice->ConstructorStatus();

		if ( !NT_SUCCESS(status) )
		{
			t << "Error constructing device VDev1394Device" << " status " << status << EOL;
			delete pDevice;
		}
		else
		{
			pDevice->ReportNewDevicePowerState(PowerDeviceD0);
		}
	}
	else
	{
		t << "Error creating device VDev1394Device\n";
	    status = STATUS_INSUFFICIENT_RESOURCES;
	}

	return status;
}
