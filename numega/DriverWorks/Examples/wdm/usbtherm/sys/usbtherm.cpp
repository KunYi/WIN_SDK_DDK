// usbtherm.cpp
//=============================================================================
//
// Compuware Corporation
// NuMega Lab
// 9 Townsend West
// Nashua, NH 03060  USA
//
// Copyright (c) 1998 Compuware Corporation. All Rights Reserved.
// Unpublished - rights reserved under the Copyright laws of the
// United States.
//
//=============================================================================

// This is a driver for the Cypress USB thermometer. It is a drop-in replacement for the 10/28/97
// version of the Cypress driver. It supports a polled reading of the temperature and button 
// status, as well as setting the LED brightness.

#define VDW_MAIN
#include <vdw.h>
#include <kusb.h>

#include "usbtherm.h"
#include "UsbThermometer.h"

#pragma hdrstop("ThermoDriver.pch")

// Generated by Driver::Wizard version 2.0

// Create the global driver trace object
KDebugOnlyTrace t("ThermoDriver");

/////////////////////////////////////////////////////////////////////
// Begin INIT section
#pragma code_seg("INIT")

DECLARE_DRIVER_CLASS(ThermoDriver, NULL)

/////////////////////////////////////////////////////////////////////
// Driver Entry (member of ThermoDriver)
//
//		This is the first entry point called by the system when the
//		driver is loaded.
// 
// Input
//		RegistryPath	String used to find driver parameters in the
//						registry.  To locate ThermoDriver look for:
//						HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\ThermoDriver
//
// Output
//		NTSTATUS		Return STATUS_SUCCESS if no errors are
//						encountered.  Any other indicates to
//						the system that an error has occured.
//
// Notes
//

NTSTATUS ThermoDriver::DriverEntry(PUNICODE_STRING RegistryPath)
{
	t << "In DriverEntry\n";

	m_Unit = 0;
	return STATUS_SUCCESS;
}

// End INIT section
/////////////////////////////////////////////////////////////////////
#pragma code_seg()

/////////////////////////////////////////////////////////////////////
// AddDevice (member of ThermoDriver)
//
//		Called when the system detects a device for which this
//		driver is responsible.
//
// Input
//		Pdo			Physical Device Object. This is a pointer to a system device
//					object that represents the physical device.
// Output
//		NTSTATUS	Success or failure code.
//
// Notes
//		This function creates the Functional Device Object, or FDO. The FDO
//		enables this driver to handle requests for the physical device. 

NTSTATUS ThermoDriver::AddDevice(PDEVICE_OBJECT Pdo)
{
	t << "AddDevice called\n";

    // Create the device object
	UsbThermometer * pDevice = new (NonPagedPool) UsbThermometer(Pdo, m_Unit);

	if (pDevice == NULL)
	{
		t << "Error creating device UsbThermometer" << (ULONG) m_Unit << EOL;
	    return STATUS_INSUFFICIENT_RESOURCES;
	}

	NTSTATUS status = pDevice->ConstructorStatus();

	if ( NT_SUCCESS(status) )
	{
		pDevice->ReportNewDevicePowerState(PowerDeviceD0);
	}
	else
	{
		t << "Error constructing device UsbThermometer" 
		  << (ULONG) m_Unit << " status " << (ULONG) status << EOL;
		delete pDevice;
	}

	return status;
}
