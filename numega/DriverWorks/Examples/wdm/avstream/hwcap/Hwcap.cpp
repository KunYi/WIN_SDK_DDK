// Hwcap.cpp
//
// Generated by DriverWizard version DriverStudio 2.7.0 (Build 511)
// Requires Compuware's DriverWorks classes
//

// must be defined once (TODO: review!!)
#define KAVSTREAM_MAIN

#include	<vdw.h>
#include	<kavstream.h>

#include "Hwcap.h"

#pragma hdrstop("Hwcap.pch")

// Set a default 32-bit tag value to be stored with each heap block
// allocated by operator new. Use BoundsChecker to view the memory pool.
// This value can be overridden using the global function SetPoolTag().
POOLTAG DefaultPoolTag('pcwH');


/////////////////////////////////////////////////////////////////////
// Declare driver 
//
DECLARE_KSMINIDRIVER_CLASS(HwcapDriver)

/////////////////////////////////////////////////////////////////////
// Trace object
KDebugOnlyTrace g_Trace("HwcapDriver");

/////////////////////////////////////////////////////////////////////
// Begin INIT section
#pragma code_seg("INIT")

/////////////////////////////////////////////////////////////////////
//  HwcapDriver::DriverEntry
//
//	Routine Description:
//		This is the first entry point called by the system when the
//		driver is loaded.
// 
//	Parameters:
//		RegistryPath - String used to find driver parameters in the
//			registry.  To locate Hwcap look for:
//			HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Hwcap
//
//	Return Value:
//		NTSTATUS - Return STATUS_SUCCESS if no errors are encountered.
//			Any other indicates to the system that an error has occured.
//
//	Comments:
//

NTSTATUS HwcapDriver::DriverEntry(PUNICODE_STRING RegistryPath)
{
	g_Trace << "HwcapDriver::DriverEntry" << EOL;

	// Compile-time Design Check

	KsDesignRules<HwcapDevice,HwcapFilter,HwcapPin>::Check();

	// Describe elements

	static KsDeviceDescriptor<HwcapDevice>	Device;
	static KsFilterDescriptor<HwcapFilter>	Filter;
	static KsPinDescriptor<HwcapPin>		Pin;

	// Connect them into a hierarchy

	Device << (Filter << Pin);

#if DBG
	g_Trace << Device;		// dump the descriptor 
#endif

	// Finally, register the descriptrors with KS

	NTSTATUS status = ::KsInitializeDriver(*this, RegistryPath, Device);

	return status;
}

// 



// End INIT section
/////////////////////////////////////////////////////////////////////
#pragma code_seg()



