// Simple1394.cpp
//
// Generated by DriverWizard version DriverStudio 2.5.0 (Build 44)
// Requires Compuware's DriverWorks classes
//

#define VDW_MAIN
#include <vdw.h>
#include "Simple1394.h"
#include "Simple1394Device.h"

#pragma hdrstop("Simple1394.pch")

// Generated by DriverWizard version DriverStudio 2.5.0 (Build 44)

// Set a default 32-bit tag value to be stored with each heap block
// allocated by operator new. Use BoundsChecker to view the memory pool.
// This value can be overridden using the global function SetPoolTag().
POOLTAG DefaultPoolTag('31S');

// Create the global driver trace object
// TODO:	Use KDebugOnlyTrace if you want trace messages
//			to appear only in debug builds.  Use KTrace if
//			you want trace messages to always appear.	
KDebugOnlyTrace t("Simple1394");

/////////////////////////////////////////////////////////////////////
// Begin INIT section
#pragma code_seg("INIT")

DECLARE_DRIVER_CLASS(Simple1394, NULL)

/////////////////////////////////////////////////////////////////////
//  Simple1394::DriverEntry
//
//	Routine Description:
//		This is the first entry point called by the system when the
//		driver is loaded.
// 
//	Parameters:
//		RegistryPath - String used to find driver parameters in the
//			registry.  To locate Simple1394 look for:
//			HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Simple1394
//
//	Return Value:
//		NTSTATUS - Return STATUS_SUCCESS if no errors are encountered.
//			Any other indicates to the system that an error has occured.
//
//	Comments:
//

NTSTATUS Simple1394::DriverEntry(PUNICODE_STRING RegistryPath)
{
	t << "In DriverEntry\n";

	m_Unit = 0;

	return STATUS_SUCCESS;

	// The following macro simply allows compilation at Warning Level 4
	// If you reference this parameter in the function simply remove the macro.
	UNREFERENCED_PARAMETER(RegistryPath);
}

// End INIT section
/////////////////////////////////////////////////////////////////////
#pragma code_seg()

/////////////////////////////////////////////////////////////////////
//  Simple1394::AddDevice
//
//	Routine Description:
//		Called when the system detects a device for which this
//		driver is responsible.
//
//	Parameters:
//		Pdo - Physical Device Object. This is a pointer to a system device
//			object that represents the physical device.
//
//	Return Value:
//		NTSTATUS - Success or failure code.
//
//	Comments:
//		This function creates the Functional Device Object, or FDO. The FDO
//		enables this driver to handle requests for the physical device. 
//

NTSTATUS Simple1394::AddDevice(PDEVICE_OBJECT Pdo)
{
	t << "AddDevice called\n";

    // Create the device object. Note that we used a form of "placement" new,
	// that is a member operator of KDevice.  This form will use storage
	// allocated by the system in the device object's device to store our
	// class instance.
	Simple1394Device* pDevice = new(
			static_cast<PCWSTR>(KUnitizedName(L"Simple1394Device", m_Unit)),
			FILE_DEVICE_UNKNOWN,
			NULL,
			0,
			DO_DIRECT_IO|DO_POWER_PAGABLE
			)
		Simple1394Device(Pdo);

	NTSTATUS status;

	if ( pDevice )
	{
		status = pDevice->ConstructorStatus();
		if ( NT_SUCCESS(status) )
		{
			m_Unit++;
			pDevice->ReportNewDevicePowerState(PowerDeviceD0);
		}
		else
		{
			t << "Error constructing device Simple1394Device" << (ULONG)m_Unit 
			  << " status " << (ULONG)status << EOL;

			delete pDevice;
		}
	}
	else
	{
		t << "Error creating device Simple1394Device" << (ULONG)m_Unit << EOL;
		status = STATUS_INSUFFICIENT_RESOURCES;
	}

	return status;
}
