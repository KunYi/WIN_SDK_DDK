// Chat1394.cpp
//=============================================================================
//
// Compuware Corporation
// NuMega Lab
// 9 Townsend West
// Nashua, NH 03060  USA
//
// Copyright (c) 1998 Compuware Corporation. All Rights Reserved.
// Unpublished - rights reserved under the Copyright laws of the
// United States.
//
//=============================================================================
//

#define VDW_MAIN
#include <vdw.h>

#include "Chat1394.h"
#include "ChatClient.h"
#include "Chat1394Device.h"



#pragma hdrstop("Chat1394.pch")

// Generated by Driver::Wizard version 2.0

	// Create the global driver trace object
	KTrace t("Chat1394");

/////////////////////////////////////////////////////////////////////
// Begin INIT section
#pragma code_seg("INIT")

DECLARE_DRIVER_CLASS(Chat1394, NULL)

/////////////////////////////////////////////////////////////////////
// Driver Entry (member of Chat1394)
//
//		This is the first entry point called by the system when the
//		driver is loaded.
// 
// Input
//		RegistryPath	String used to find driver parameters in the
//						registry.  To locate Chat1394 look for:
//						HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Chat1394
//
// Output
//		NTSTATUS		Return STATUS_SUCCESS if no errors are
//						encountered.  Any other indicates to
//						the system that an error has occured.
//
// Notes
//

NTSTATUS Chat1394::DriverEntry(PUNICODE_STRING RegistryPath)
{
	t << "In DriverEntry\n";

    // Set default pool tag for all 'new' allocations to "New ".
    // Under the checked build, use the DDK POOLMON utility
    // to view the memory pool
    SetPoolTag(' weN');

	// Open the "Parameters" key under the driver
	KRegistryKey Params(RegistryPath, L"Parameters");
	if ( NT_SUCCESS(Params.LastError()) )
	{
#if DBG
		ULONG bBreakOnEntry = FALSE;
			// Read "BreakOnEntry" value from registry
		Params.QueryValue(L"BreakOnEntry", &bBreakOnEntry);
			// If requested, break into debugger
		if (bBreakOnEntry) DbgBreakPoint();

#endif
		// Load driver data members from the registry
		LoadRegistryParameters(Params);
	}
	
	m_Unit = 0;

	return STATUS_SUCCESS;
}


/////////////////////////////////////////////////////////////////////
// LoadRegistryParameters (member of Chat1394)
//
//		Load driver data members from the registry.
// 
// Input
//		Params		Open registry key pointing to "Parameters"
//
// Output
//					Member variables are updated with values read from registry
//			
// Notes
//		The parameters are found as values under the "Parameters" key,	
//		HKLM\SYSTEM\CurrentControlSet\Services\Chat1394\Parameters\...

void Chat1394::LoadRegistryParameters(KRegistryKey &Params)
{

	m_bBreakOnEntry = FALSE;
	Params.QueryValue(L"BreakOnEntry", &m_bBreakOnEntry);
	t << "m_bBreakOnEntry loaded from registry, resulting value: [" << m_bBreakOnEntry << "]\n";

}
// End INIT section
/////////////////////////////////////////////////////////////////////
#pragma code_seg()

/////////////////////////////////////////////////////////////////////
// AddDevice (member of Chat1394)
//
//		Called when the system detects a device for which this
//		driver is responsible.
//
// Input
//		Pdo			Physical Device Object. This is a pointer to a system device
//					object that represents the physical device.
// Output
//		NTSTATUS	Success or failure code.
//
// Notes
//		This function creates the Functional Device Object, or FDO. The FDO
//		enables this driver to handle requests for the physical device. 

NTSTATUS Chat1394::AddDevice(PDEVICE_OBJECT Pdo)
{
	t << "AddDevice called\n";

    // Create the device object
	Chat1394Device * pDevice = new (NonPagedPool) Chat1394Device(Pdo, m_Unit);

	if (pDevice == NULL)
	{
		t << "Error creating device Chat1394Device"
			   << (ULONG) m_Unit << EOL;
	    return STATUS_INSUFFICIENT_RESOURCES;
	}

	NTSTATUS status = pDevice->ConstructorStatus();

	if ( !NT_SUCCESS(status) )
	{
		t << "Error constructing device Chat1394Device"
		  << (ULONG) m_Unit << " status " << (ULONG) status << EOL;
		delete pDevice;
	}
	else
	{
		m_Unit++;
	}

	return status;
}
