// vbus.cpp
// Implementation of VBus class
//
// Generated by DriverWizard version DriverStudio 2.7.0 (Build 554)
// Requires Compuware's DriverWorks classes
//

#include <vdw.h>

#include "vscsi.h"
#include "vbus.h"
#include "vdisk.h"

////////////////////////////////////////////////////////////////////////
//  VBus::AddressUsed
//
//	Routine Description:
//		determines if id is unique
//
//	Parameters:
//		[in] address
//			address to check
//
//	Return Value:
//		true if found
//
//	Comments:
//		None
//
bool VBus::AddressUsed(ULONG address)
{
	t << "VBus::IdUsed " << address << EOL;

	bool bFound = false;

	m_Lock.Acquire();

	VDisk* pDevice = (VDisk*)m_Children.HeadNoLock();
	while ( pDevice )
	{
		if ( pDevice->m_address == address )
		{
			bFound = true;
			break;
		}
		else
			pDevice = (VDisk*)m_Children.NextNoLock(pDevice);
	}

	m_Lock.Release();

	return bFound;
}

////////////////////////////////////////////////////////////////////////
//  VBus::RemoveChild
//
//	Routine Description:
//		mark child as not present, but keep it in a collection
//
//	Parameters:
//		[in] address
//			address of a child
//
//	Return Value:
//		true if found
//
//	Comments:
//		None
//
bool VBus::RemoveChild(ULONG address)
{
	t << "VBus::RemoveChild " << address << EOL;

	m_Lock.Acquire();

	if ( m_NumberOfChildren == 0 )
	{
		m_Lock.Release();
		return false;
	}

	bool bFound = false;

	VDisk* pDevice = (VDisk*)m_Children.HeadNoLock();
	while ( pDevice )
	{
		if ( pDevice->m_address == address )
		{
			bFound = true;
			pDevice->Removed();
			break;
		}
		else
			pDevice = (VDisk*)m_Children.NextNoLock(pDevice);
	}

	m_Lock.Release();

	return bFound;
}



