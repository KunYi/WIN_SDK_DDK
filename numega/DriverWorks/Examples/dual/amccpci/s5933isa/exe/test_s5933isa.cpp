// Test_S5933Isa.cpp
//
// Generated by DriverWizard version 2.02
//
// This console application demonstrates how to open a handle
// to a device in your driver, and communicate with the driver
// using Read, Write, and DeviceIoControl calls, as appropriate.
//
// This test program attempts to open the device with link name
// $ $linkname$ $, which corresponds to Unit 0 of the 
// S5933IsaDevice device class in the driver.

//
// You can build this application using the command line compiler with
// the following command:
//
//		cl Test_S5933Isa.cpp
//


#include <stdlib.h>
#include <stdio.h>
#include <windows.h>

#include <winioctl.h>
#include "..\S5933Isaioctl.h"
#include "..\ao59xxrd.h"


typedef void VOIDFUNC();

// Prototypes
void Usage(void);
void ShowIoctlValues(void);
void Test_S5933ISA_IOCTL_800_RESET_FLAGS(void);
void Test_S5933ISA_IOCTL_800_POST_MSG(int mbox, ULONG value);
void Test_S5933ISA_IOCTL_801_RETRIEVE_MSG(int mbox);
void Test_S5933ISA_IOCTL_802_READ_PASSTHRU(void);
void Test_S5933ISA_IOCTL_803_DUMP_REGISTERS(void);

void CloseIfOpen(void);
void doRead(int i);
void doWrite(int i);

// Global data


#define N_IOCODES	4

// Names of IOCTL codes
//
char *IOnames[N_IOCODES+1] =
{
	"S5933ISA_IOCTL_800_POST_MSG",
	"S5933ISA_IOCTL_801_RETRIEVE_MSG",
	"S5933ISA_IOCTL_802_READ_PASSTHRU",
	"S5933ISA_IOCTL_803_DUMP_REGISTERS",
	""
};

// IOCTL codes
//
int IOcodes[N_IOCODES+1] =
{
	S5933ISA_IOCTL_800_POST_MSG,
	S5933ISA_IOCTL_801_RETRIEVE_MSG,
	S5933ISA_IOCTL_802_READ_PASSTHRU,
	S5933ISA_IOCTL_803_DUMP_REGISTERS,
	0
};

// Handle to device opened in driver.
//
HANDLE	hDevice = INVALID_HANDLE_VALUE;

// Name used to open device
//
char *sLinkName = "\\\\.\\S5933IsaDevice0";

////////////////////////////////////////////////////////////////////////
// OpenByName
//
//		Open a handle to the requested device
//
HANDLE OpenByName(void)
{
	// Create a handle to the driver
	return CreateFile(sLinkName,
					  GENERIC_READ | GENERIC_WRITE,
					  FILE_SHARE_READ,
					  NULL,
					  OPEN_EXISTING,
					  0,
					  NULL);
}



////////////////////////////////////////////////////////////////////////
// Exit
//
//		Print a message and exit   
//
   void Exit(int res)
{
	printf("Exiting...\n\n");
	CloseIfOpen();
	exit(res);
}


////////////////////////////////////////////////////////////////////////
// Main entry point
//
//
int __cdecl main(int argc, char *argv[])
{
	int		nArgIndex;				// Walk through command line arguments
	int		nArgIncrement = 0;
	int		val;
	int		mbox;
	ULONG	value;

	printf("Test application Test_S5933Isa starting...\n");

	hDevice = OpenByName();
	if (hDevice == INVALID_HANDLE_VALUE)
	{
		printf("ERROR opening device: (%0x) returned from CreateFile\n", GetLastError());
		Exit(1);
	}
	else
	{
		printf("Device found, handle open.\n");
	}


	// Parse the command line

	if (argc < 2) Usage();

	nArgIndex = 1;

	while (nArgIndex < argc)
	{
		// Parse ahead to determine numeric value of argument

		switch (argv[nArgIndex][0])
		{

		case 'r':
		case 'R':
			if (nArgIndex+1 >= argc) Usage();
			if (!isdigit(argv[nArgIndex+1][0])) Usage();
			val = atoi(argv[nArgIndex+1]);
			doRead(val);
			nArgIncrement = 2;
			break;

		case 'w':
		case 'W':
			if (nArgIndex+1 >= argc) Usage();
			if (!isdigit(argv[nArgIndex+1][0])) Usage();
			val = atoi(argv[nArgIndex+1]);
			doWrite(val);
			nArgIncrement = 2;
			break;

		case 'i':
		case 'I':
			if (nArgIndex+1 >= argc) Usage();
			if (!isdigit(argv[nArgIndex+1][0])) Usage();
			val = atoi(argv[nArgIndex+1]);

			if (val >= N_IOCODES)
			{
				printf("IO control code index must be less than %d\n", N_IOCODES);
				ShowIoctlValues();
				Exit(1);
			}

			switch (IOcodes[val])
			{
			case S5933ISA_IOCTL_800_POST_MSG:
				if (nArgIndex+3 >= argc) Usage();
				mbox = atoi(argv[nArgIndex+2]);
				if (mbox < 1 || mbox > 4) Usage();
				value = strtoul(argv[nArgIndex+3], NULL, 0);

				Test_S5933ISA_IOCTL_800_POST_MSG(mbox, value);
				nArgIncrement = 4;
				break;

			case S5933ISA_IOCTL_801_RETRIEVE_MSG:
				if (nArgIndex+2 >= argc) Usage();
				mbox = atoi(argv[nArgIndex+2]);
				Test_S5933ISA_IOCTL_801_RETRIEVE_MSG(mbox);
				nArgIncrement = 3;
				break;

			case S5933ISA_IOCTL_802_READ_PASSTHRU:
				if (nArgIndex+1 >= argc) Usage();
				Test_S5933ISA_IOCTL_802_READ_PASSTHRU();
				nArgIncrement = 2;
				break;
			case S5933ISA_IOCTL_803_DUMP_REGISTERS:
				Test_S5933ISA_IOCTL_803_DUMP_REGISTERS();
				nArgIncrement = 2;
				break;

			default:
				printf("IO control code not valid\n");
				Exit(1);
			}
			break;

		case '?':
		case 'h':
		default:
			Usage();
		}
		nArgIndex += nArgIncrement;
	}

	return 0;
}


////////////////////////////////////////////////////////////////////////
// CloseIfOpen
//
//		Close the device if we previously opened a handle to it.
//
void CloseIfOpen(void)
{
	if (hDevice != INVALID_HANDLE_VALUE)
	{
		// Close the handle to the driver
		if (!CloseHandle(hDevice))
		{
			printf("ERROR: CloseHandle returns %0x.\n", GetLastError());
		}
		hDevice = INVALID_HANDLE_VALUE;
	}
}


////////////////////////////////////////////////////////////////////////
// doRead
//
//		Read 'n' bytes of data from the device
//
// Note: This simple test app reads data from the device and displays the
//			data as characters.  This behavior can be modified as appropriate
//			for your device.
//
void doRead(int n)
{
	char	*buf;
	ULONG	nRead;
	int		i;
	int		j;

	buf = (char *) malloc(n);
	if (buf == NULL)
	{
		printf("Failed to allocate buffer for read");
		Exit(1);
	}

	// Read data from driver
	printf("Reading from device - ");
    if (!ReadFile(hDevice, buf, n, &nRead, NULL))
	{
		printf("ERROR: ReadFile returns %0x.", GetLastError());
		Exit(1);
    }
	printf("%d bytes read from device (%d requested).\n", nRead, n);

	// Print what was read
	i = 0;
	while(i < n)
	{
		j = min((i+26),n);
		for(; i < j; i++)
		{
			printf("%c, ", buf[i]);
		}
		printf("\n");
	}
	
	free(buf);
}


////////////////////////////////////////////////////////////////////////
// doWrite
//
//		Write 'n' bytes of data to the device
//
// Note: This simple test app writes sequential characters to the
// 			device.  This behavior can be modified as appropriate
//			for your device.
//
void doWrite(int n)
{
	char	*buf;
	ULONG	nWritten;
	int		i;
	int		j;

	buf = (char *) malloc(n);
	if (buf == NULL)
	{
		printf("Failed to allocate buffer for write");
		Exit(1);
	}

	// start with the mod26 letter of the number of bytes to write
	j = (n % 26);
	// load buffer with dummy data (abcdefg...)
	for (i=0; i<n; i++, j=(j + 1)%26)
	{
		buf[i] = 'a' + j;
	}
	
	// Write data to driver
	printf("Writing to device - ");
    if (!WriteFile(hDevice, buf, n, &nWritten, NULL))
	{
		printf("ERROR: WriteFile returns %0x.", GetLastError());
		Exit(1);
    }
	printf("%d bytes written to device (%d attempted).\n", nWritten, n);

	// Print what was written
	i = 0;
	while(i < n)
	{
		j = min((i+26),n);
		for(; i < j; i++)
		{
			printf("%c, ", buf[i]);
		}
		printf("\n");
	}

	free(buf);
}


////////////////////////////////////////////////////////////////////////
// Usage
//
//		Print a usage message describing arguments to this program
//
void Usage(void)
{
	printf("Usage: Test_S5933Isa [r n] [w n] [i n ...]\n");
	printf("       r initiates a read of specified number of bytes\n");
	printf("       w initiates a write of specified number of bytes\n");
	printf("       i initiates an IO Control Code message with specified index value\n");
	ShowIoctlValues();
	printf("Example:\n");
	printf("    Test_S5933Isa r 32 w 32\n");
	printf("        read 32 bytes, then write 32 bytes\n");

	Exit(1);
}



#define	IOCTL_INBUF_SIZE	512
#define	IOCTL_OUTBUF_SIZE	512

////////////////////////////////////////////////////////////////////////
// Test_S5933ISA_IOCTL_800_POST_MSG
//
void Test_S5933ISA_IOCTL_800_POST_MSG(int mbox, ULONG value)
{
	ULONG	nOutput;						// Count written to bufOutput
    KS5933ISA_MAILBOX_MESSAGE message;

    message.MessageMailBox = mbox;
    message.MessageValue = value;

	// Call device IO Control interface (S5933ISA_IOCTL_800_POST_MSG) in driver
	printf("Issuing Ioctl to device - \n");
    if (!DeviceIoControl(hDevice, 
                         S5933ISA_IOCTL_800_POST_MSG,
                         &message,
                         sizeof(message),
                         NULL,
                         0,
                         &nOutput,
                         NULL))
	{
		printf("ERROR: DeviceIoControl returns %0x.", GetLastError());
		Exit(1);
    }
}

////////////////////////////////////////////////////////////////////////
// Test_S5933ISA_IOCTL_801_RETRIEVE_MSG
//
void Test_S5933ISA_IOCTL_801_RETRIEVE_MSG(int mbox)
{
	ULONG	nOutput;						// Count written to bufOutput
    KS5933ISA_MAILBOX_MESSAGE message;

    message.MessageMailBox = mbox;
    message.MessageValue = 0;

	// Call device IO Control interface (S5933ISA_IOCTL_800_POST_MSG) in driver
	printf("Issuing Ioctl to device - \n");
    if (!DeviceIoControl(hDevice, 
                         S5933ISA_IOCTL_801_RETRIEVE_MSG,
                         &message,
                         sizeof(message),
                         &message,
                         sizeof(message),
                         &nOutput,
                         NULL))
	{
		printf("ERROR: DeviceIoControl returns %0x.", GetLastError());
		Exit(1);
    }
	printf(" Message received from mailbox %d with value 0x%08X\n\n",
		message.MessageMailBox, message.MessageValue);
}

////////////////////////////////////////////////////////////////////////
// Test_S5933ISA_IOCTL_802_READ_PASSTHRU
//
void Test_S5933ISA_IOCTL_802_READ_PASSTHRU(void)
{
	ULONG	nOutput;						// Count written to bufOutput
    KS5933ISA_PASSTHRU pthru;

    pthru.Data = 0;

	// Call device IO Control interface (S5933ISA_IOCTL_802_READ_PASSTHRU) in driver
	printf("Issuing Ioctl to device - ");
	if (!DeviceIoControl(hDevice,
						 S5933ISA_IOCTL_802_READ_PASSTHRU,
						 &pthru,
						 sizeof(pthru),
						 &pthru,
						 sizeof(pthru),
						 &nOutput,
						 NULL)
	   )
	{
		printf("ERROR: DeviceIoControl returns %0x.", GetLastError());
		Exit(1);
	}
	printf(" Passthru contains data 0x%08X\n\n", pthru.Data);
}

////////////////////////////////////////////////////////////////////////
// Test_S5933ISA_IOCTL_803_DUMP_REGISTERS
//
//		Test one Io Control Code
//
void Test_S5933ISA_IOCTL_803_DUMP_REGISTERS(void)
{
// Note that Input and Output are named from the point of view
// of the DEVICE:
//		bufInput  supplies data to the device
//		bufOutput is written by the device to return data to this application

	AMCCS5933_ADDON_OPERATION_REGISTERS regs;	// Output from device
	ULONG	nOutput;						// Count written to bufOutput

	// Call device IO Control interface (S5933_IOCTL_807_DUMP_REGISTERS) in driver
	printf("Issuing Ioctl to device - ");
	if (!DeviceIoControl(hDevice,
						 S5933ISA_IOCTL_803_DUMP_REGISTERS,
						 NULL,
						 0,
						 &regs,
						 sizeof(regs),
						 &nOutput,
						 NULL)
	   )
	{
		printf("ERROR: DeviceIoControl returns %0x.", GetLastError());
		Exit(1);
	}

	printf("AMCC S5933 Addon Registers:\n");
	printf("	AddonIncomingMailbox1:		0x%08X\n", regs.AddonIncomingMailbox1);
	printf("	AddonIncomingMailbox2:		0x%08X\n", regs.AddonIncomingMailbox2);
	printf("	AddonIncomingMailbox3:		0x%08X\n", regs.AddonIncomingMailbox3);
	printf("	AddonIncomingMailbox4:		0x%08X\n", regs.AddonIncomingMailbox4);
	printf("	AddonOutgoingMailbox1:		0x%08X\n", regs.AddonOutgoingMailbox1);
	printf("	AddonOutgoingMailbox2:		0x%08X\n", regs.AddonOutgoingMailbox2);
	printf("	AddonOutgoingMailbox3:		0x%08X\n", regs.AddonOutgoingMailbox3);
	printf("	AddonOutgoingMailbox4:		0x%08X\n", regs.AddonOutgoingMailbox4);
	printf("	AddonFIFORegisterPort:		Not Read\n"); 
	printf("	MasterWriteAddress:		0x%08X\n", regs.MasterWriteAddress);
	printf("	AddonPassThruAddress:		0x%08X\n", regs.AddonPassThruAddress);
	printf("	AddonPassThruData:		0x%08X\n", regs.AddonPassThruData);
	printf("	MasterReadAddress:		0x%08X\n", regs.MasterReadAddress);
	printf("	AddonMailboxEmptyFullStatus:	0x%08X\n", regs.AddonMailboxEmptyFullStatus);
	printf("	AddonInterruptControl:		0x%08X\n", regs.AddonInterruptControl);
	printf("	AddonGeneralControlStatus:	0x%08X\n", regs.AddonGeneralControlStatus);
    printf("\n");
}


////////////////////////////////////////////////////////////////////////
// ShowIoctlValues
//
//		Print list of IO Control Code values for usage display
//
void ShowIoctlValues(void)
{
	int i;

	for (i=0; i<N_IOCODES; i++)
	{
		if (i==0)
			printf( "         IO control code index\n");
		printf( "           %d is code %s [%x]\n", i, IOnames[i], IOcodes[i]);
		if (IOcodes[i] == S5933ISA_IOCTL_800_POST_MSG)
		{
			printf( "               and has two arguments: mailbox[1-4] and message\n");
			printf( "               Example: i %d 1 0x12345678\n", i);
		}
		else if (IOcodes[i] == S5933ISA_IOCTL_801_RETRIEVE_MSG)
		{
			printf( "               and has one argument: mailbox[1-4]\n");
			printf( "               Example: i %d 1\n", i);
		}
		else if (IOcodes[i] == S5933ISA_IOCTL_802_READ_PASSTHRU)
		{
			printf( "               and has no arguments\n");
			printf( "               Example: i %d\n", i);
		}
		else
		{
			printf( "               and has no arguments\n");
			printf( "               Example: i %d\n", i);
		}
	}
}
