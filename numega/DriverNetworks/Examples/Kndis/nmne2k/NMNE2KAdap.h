// NMNE2KAdap.h: interface for the NMNE2KAdapter class.
//
//=============================================================================
//
// Compuware Corporation
// NuMega Lab
// 9 Townsend West
// Nashua, NH 03060  USA
//
// Copyright (c) 2001 Compuware Corporation. All Rights Reserved.
// Unpublished - rights reserved under the Copyright laws of the
// United States.
//
//=============================================================================
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_NMNE2KADAP_H__8534F9A9_27F5_11D3_8F9E_00C04F7445B7__INCLUDED_)
#define AFX_NMNE2KADAP_H__8534F9A9_27F5_11D3_8F9E_00C04F7445B7__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include	<kndis.h>
#include	"Characteristics.h" // generated by wizard

// TODO:	Include your .h files as needed

///////////////////////////////////////////////////////////////////////
// NMNE2KAdapter		Generated by wizard 
//
// This class defines member methods which are passed control on
// NDIS callbacks. 
//
// The instances of the class are created automatically
// by KNDIS framework. The class expose no public methods
// since its methods are called only from the "friendly"
// KNdisWrapper class.
//
class NMNE2KAdapter : public KNdisMiniAdapter  
	{
	SAFE_DESTRUCTORS
public:
	NMNE2KAdapter();

protected:
	~NMNE2KAdapter();

	// These methods MUST be implemented:
	NDIS_STATUS Initialize
				(IN OUT KNdisMedium& Medium, IN KNdisConfig& Config);
    VOID Halt(VOID);
    NDIS_STATUS Reset(OUT PBOOLEAN AddressingReset);


	// Wizard generates the following methods-handlers in sync
	// with the content of Characteristics.h file.
	// The hanlders are called from the following "friendly" class only:

	friend class KNdisWrapper<NMNE2KAdapter>;
	
	// sending packets
    NDIS_STATUS Send(
			IN	PNDIS_PACKET			Packet,
			IN	UINT					Flags
			);

	// checking for bad things
    BOOLEAN CheckForHang();

	// dealing with INTs
    VOID DisableInterrupt();
    VOID EnableInterrupt();
    VOID HandleInterrupt();
    VOID Isr(
			OUT PBOOLEAN InterruptRecognized,
			OUT PBOOLEAN QueueMiniportHandleInterrupt);

	// retrieve the rest of the partial
    NDIS_STATUS TransferData(
			OUT PNDIS_PACKET			Packet,
			OUT PUINT					BytesTransferred,
			IN  PVOID					FrameLocation, /* MiniportReceiveContext */
			IN	UINT					ByteOffset,
			IN	UINT					BytesToTransfer);

	// processing shutdown
	VOID Shutdown(VOID);

	// OID processing (via OID_MAP)
	NDIS_STATUS QueryInformation(
			IN	NDIS_OID				Oid,
			IN	PVOID					InformationBuffer,
			IN	ULONG					InformationBufferLength,
			OUT PULONG					BytesWritten,
			OUT PULONG					BytesNeeded
			);
	NDIS_STATUS SetInformation(
			IN	NDIS_OID				Oid,
			IN	PVOID					InformationBuffer,
			IN	ULONG					InformationBufferLength,
			OUT PULONG					BytesRead,
			OUT PULONG					BytesNeeded
			);

	// Standard OID hanlders. This should be included in every adapter class declaration.
	#include	<KNdisOidDefs.h>

	// A list of supported OIDs. Inserted by the wizard
	static NDIS_OID sm_OID_GEN_SUPPORTED_LIST[];

// Your custom data member go in here

	ETHERNET_ADDRESS	m_CurrentAddress;
	ETHERNET_ADDRESS	m_PermanentAddress;

	// NDIS_PACKET_TYPE_xxx bit set 
	ULONG			m_uPacketFilter;

	// NDIS_MAC_OPTION_xxx bit set
	ULONG			m_uMacOptions;

	// Current max lookahead
	ULONG			m_uCurrentLookahead;

	// H/W resources:
    KNdisIoRange		m_Ports;
	KNdisInterrupt		m_Interrupt;

	// Queue of "pending" Tx packets. 
	KNdisPacketList*	m_pTxQueue;

	// Lookahead cache 
	KNdisLookahead<NMNE2K_MAX_LOOKAHEAD+NMNE2K_HEADER_SIZE> m_Lookahead;

	// Statistics. Implement mandatory general and ethernet counters.

	KNdisStatsGen					m_GenStats;
	KNdisStatsEx<NdisMedium802_3>	m_EthStats;

	// Power Management State
#if KNDIS_PNP_AWARE
	KNdisPnpMode<NMNE2KAdapter>		m_Power;
#endif

public:
	// Method required by the KNdisLookahead template:
	UINT CopyDataUp(PVOID FrameBase, PUCHAR Buffer, ULONG Length, ULONG BufOffset); 

protected:
	// Basic card functions
	NDIS_STATUS CardInit();
	VOID CardRestart(BOOLEAN bEnable);
	VOID CardRead(PUCHAR Buffer, ULONG Offset, ULONG Length);
	VOID CardWrite(PUCHAR Buffer, ULONG Offset, ULONG Length);

	VOID CopyDataDown(PNDIS_PACKET Packet);

	// methods synchronized with the interrupt
	KNDIS_DECLARE_SYNCHROCALLBACK (NMNE2KAdapter, CardSetFilters);
	void CardSetFilters();
	KNDIS_DECLARE_SYNCHROCALLBACK (NMNE2KAdapter, CardSetMulticast);
	void CardSetMulticast();

	// NS8390 state variables
	ULONG		m_XmitStart;	
	ULONG		m_RecvStart;
	ULONG		m_RecvStop;
	ULONG		m_NextPkt;

	UCHAR		m_BusWidth;			// non-zero for 16-bit bus

	BOOLEAN m_bXmitInUse;		// frame is being transmitted: have to queue
	BOOLEAN m_bEnabled;			// TRUE when the card is on

	// Content of MAR[] array on the card
	UCHAR		m_MulticastBits[NMNE2K_802_3_MAX_LIST_SIZE/8];

	// CRC calculation used for multicast array programming
	ULONG CardComputeCrc(PUCHAR Buffer,UINT Length);

};


/////////////////////////////////////////////////////////////
// NS 8390 Card Definitions
/////////////////////////////////////////////////////////////
/*
 *      Page 0 registers
 */

#define NS_CR           (0)             /* Command */
#define NS_PSTART       (1)             /* Page Start Register */
#define NS_PSTOP        (2)             /* Page Stop Register */
#define NS_BNRY         (3)             /* Boundary Pointer */
#define NS_TPSR         (4)             /* Transmit Page Start Address */
#define NS_TBCR0        (5)             /* Transmit Byte Count Register 0 */
#define NS_TBCR1        (6)             /* Transmit Byte Count Register 1 */
#define NS_ISR          (7)             /* Interrupt Status Register */
#define NS_RSAR0        (8)             /* Remote Start Address Register 0 */
#define NS_RSAR1        (9)             /* Remote Start Address Register 1 */
#define NS_RBCR0        (10)            /* Remote Byte Count Register 0 */
#define NS_RBCR1        (11)            /* Remote Byte Count Register 1 */
#define NS_RCR          (12)            /* Receive Configuration Register */
#define NS_TCR          (13)            /* Transmit Configuration Register */
#define NS_DCR          (14)            /* Data Configuration Register */
#define NS_IMR          (15)            /* Interrupt Mask Register */
#define NS_RST          (31)            /* Reset Regisiter (?) */

#define NS_CLDA0        (1)             /* Current Local DMA Address 0 */
#define NS_CLDA1        (2)             /* Current Local DMA Address 1 */
#define NS_TSR          (4)             /* Transmit Status Register */
#define NS_NCR          (5)             /* Number of Collisions Register */
#define NS_FIFO         (6)             /* FIFO */
#define NS_CRDA0        (8)             /* Current Remove DMA Address 0 */
#define NS_CRDA1        (9)             /* Current Remote DMA Address 1 */
#define NS_RSR          (12)            /* Receive Status Register */
#define NS_CNTR0        (13)            /* Frame Alignment Error Count */
#define NS_CNTR1        (14)            /* CRC Error Count */
#define NS_CNTR2        (15)            /* Missed Packet Error Count */

/*
 *      Page 1 registers
 */

#define NS_PAR0         (1)             /* Physical Address Register 0 */
#define NS_PAR1         (2)             /* Physical Address Register 1 */
#define NS_PAR2         (3)             /* Physical Address Register 2 */
#define NS_PAR3         (4)             /* Physical Address Register 3 */
#define NS_PAR4         (5)             /* Physical Address Register 4 */
#define NS_PAR5         (6)             /* Physical Address Register 5 */
#define NS_CURR         (7)             /* Current Page Register */
#define NS_MAR0         (8)             /* Multicast Address Register 0 */
#define NS_MAR1         (9)             /* Multicast Address Register 1 */
#define NS_MAR2         (10)            /* Multicast Address Register 2 */
#define NS_MAR3         (11)            /* Multicast Address Register 3 */
#define NS_MAR4         (12)            /* Multicast Address Register 4 */
#define NS_MAR5         (13)            /* Multicast Address Register 5 */
#define NS_MAR6         (14)            /* Multicast Address Register 6 */
#define NS_MAR7         (15)            /* Multicast Address Register 7 */

/*
 *      Pseudo-DMA port
 */

#define NS_DATA         (16)            /* Pseudo-DMA Port */

/*
 *      Command register bits
 */

#define N_STP           0x01            /* STOP */
#define N_STA           0x02            /* START */
#define N_TXP           0x04            /* TRANSMIT PACKET */
#define N_RRD           0x08            /* REMOTE DMA READ */
#define N_RWR           0x10            /* REMOTE DMA WRITE */
#define N_ARD           0x20            /* ABORT REMOTE DMA */
#define N_PG0           0x00            /* SELECT PAGE 0 */
#define N_PG1           0x40            /* SELECT PAGE 1 */

/*
 *      Interrupt status register bits
 */

#define N_PRX           0x01            /* PACKET RECEIVED */
#define N_PTX           0x02            /* PACKET TRANSMITTED */
#define N_RXE           0x04            /* RECEIVE ERROR */
#define N_TXE           0x08            /* TRANSMIT ERROR */
#define N_OVW           0x10            /* OVERWRITE WARNING */
#define N_CNT           0x20            /* COUNTER OVERFLOW */
#define N_RDC           0x40            /* REMOTE DMA COMPLETE */
#define N_RST           0x80            /* RESET STATUS */
/*
 *      Interrupt mask register bits
 */

#define N_PRXE          0x01            /* PACKET RECEIVED INTERRUPT ENABLE */
#define N_PTXE          0x02            /* PACKET TRANSMITTED INTERRUPT ENABLE */
#define N_RXEE          0x04            /* RECEIVE ERROR INTERRUPT ENABLE */
#define N_TXEE          0x08            /* TRANSMIT ERROR INTERRUPT ENABLE */
#define N_OVWE          0x10            /* OVERWRITE WARNING INTERRUPT ENABLE */
#define N_CNTE          0x20            /* COUNTER OVERFLOW INTERRUPT ENABLE */
#define N_RDCE          0x40            /* REMOTE DMA COMPLETE INTERRUPT ENABLE

/*
 *      Data configuration register bits
 */

#define N_WTS           0x01            /* WORD TRANSFER SELECT */
#define N_BOS           0x02            /* BYTE ORDER SELECT */
#define N_LAS           0x04            /* LONG ADDRESS SELECT */
#define N_LS            0x08            /* LOOPBACK SELECT */
#define N_AUTO          0x10            /* AUTO-INITIALIZE REMOTE */
#define N_FT0           0x20            /* FIFO THRESHHOLD SELECT 0 */
#define N_FT1           0x40            /* FIFO THRESHHOLD SELECT 1 */

/*
 *      Transmit configuration register bits
 */

#define N_CRC           0x01            /* INHIBIT CRC */
#define N_LB0           0x02            /* ENCODED LOOPBACK CONTROL 0 */
#define N_LB1           0x04            /* ENCODED LOOPBACK CONTROL 2 */
#define N_ATD           0x08            /* AUTO TRANSMIT DISABLE */
#define N_OFST          0x10            /* COLLISION OFFSET ENABLE */

/*
 *      Transmit status register bits
 */

#define N_TXOK          0x01            /* PACKET TRANSMITTED */
#define N_COL           0x04            /* TRANSMIT COLLIDED */
#define N_ABT           0x08            /* TRANSMIT ABORTED */
#define N_CRS           0x10            /* CARRIER SENSE LOST */
#define N_FU            0x20            /* FIFO UNDERRUN */
#define N_CDH           0x40            /* CD HEARTBEAT */
#define N_OWC           0x80            /* OUT OF WINDOW COLLISION */

/*
 *      Receive configuration register bits
 */

#define N_SEP           0x01            /* SAVE ERRORED PACKETS */
#define N_AR            0x02            /* ACCEPT RUNT PACKETS */
#define N_AB            0x04            /* ACCEPT BROADCAST PACKETS */
#define N_AM            0x08            /* ACCEPT MULTICAST PACKETS */
#define N_PRO           0x10            /* PROMISCUOUS PHYSICAL */
#define N_MON           0x20            /* MONITOR MODE */

/*
 *      Receive status register bits
 */

#define N_RXOK          0x01            /* PACKET RECEIVED INTACT */
#define N_CRCERR        0x02            /* CRC ERROR */
#define N_FAE           0x04            /* FRAME ALIGNMENT ERROR */
#define N_FO            0x08            /* FIFO OVERRUN */
#define N_MPA           0x10            /* MISSED PACKET */
#define N_PHY           0x20            /* PHYSICAL/MULTICAST ADDRESS */
#define N_DIS           0x40            /* RECEIVER DISABLED */
#define N_DFR           0x80            /* DEFERRING */

#endif // !defined(AFX_NMNE2KADAP_H__8534F9A9_27F5_11D3_8F9E_00C04F7445B7__INCLUDED_)
