// NmPacketDevice.h
//
//=============================================================================
//
// Compuware Corporation
// NuMega Lab
// 9 Townsend West
// Nashua, NH 03060  USA
//
// Copyright (c) 2001 Compuware Corporation. All Rights Reserved.
// Unpublished - rights reserved under the Copyright laws of the
// United States.
//
//=============================================================================
// Generated by DriverWizard version DriverStudio 2.0.0 (Build 4409)
// Requires Compuware's DriverWorks classes
//

#ifndef __NmPacketDevice_h__
#define __NmPacketDevice_h__

#include "kndis.h"

class NmPacketBinding; // fwd

//////////////////////////////////////////////////////////////////
// NmPacketDevice
//
// Device object representing a protocol binding.
// Win32 apps talk to this device to capture/send packets and 
// control the bound NIC.
//
class NmPacketDevice : public KDevice
{
	// Constructors
public:
	SAFE_DESTRUCTORS;
	NmPacketDevice(NmPacketBinding* Binding);
	~NmPacketDevice();

	// Member Functions
public:
	DEVMEMBER_DISPATCHERS
	DEVMEMBER_CANCELIRP (NmPacketDevice, CancelRead)
#if NDIS51
	DEVMEMBER_CANCELIRP (NmPacketDevice, CancelWrite)
#endif

	NTSTATUS IOCTL_PROTOCOL_SETQUERY_OID_Handler(KIrp I);
	NTSTATUS IOCTL_PROTOCOL_RESET_Handler(KIrp I);

#ifdef __COMMENT_ONLY
	virtual NTSTATUS CleanUp(KIrp I); 				// COMMENT_ONLY
	virtual NTSTATUS Close(KIrp I);					// COMMENT_ONLY
	virtual NTSTATUS Create(KIrp I); 				// COMMENT_ONLY
	virtual NTSTATUS DeviceControl(KIrp I);			// COMMENT_ONLY
	virtual NTSTATUS Read(KIrp I);			  		// COMMENT_ONLY
	virtual NTSTATUS Write(KIrp I);					// COMMENT_ONLY

	void CancelRead(KIrp I);
	void CancelWrite(KIrp I);
#endif

	// function waits for pending operations to complete
	void WaitForIrpsToComplete();

	friend class NmPacketBinding;

	// Packet context (stored in the Reserved area of the packet descr)
	struct PacketContext {
			PIRP		Irp;
			union { 
			PMDL		pMdl;		// Read operations
			LONG		RefCount;	// Write operations (used with NDIS 5.1 only)
			} Data ;
	};

	// define type of packet lists with contexts for convenience
	typedef KNdisPacketListWithContext<PacketContext> PacketList;

protected:
	// cancels all reads
	void CancelReads(); 

	// Member Data


	// Binding object represented by this device
	NmPacketBinding*	m_pBinding;

	// Packet descriptor pool to serve the i/o requests
	KNdisPacketPool		m_PacketPool;

	// Interlocked Packet list for pending receives
	PacketList	m_RcvList;

	// Interlocked Packet list for pending resets
	KInterlockedList<IRP>	m_ResetList;

	// Pending request counter
	KNdisRefCounter		m_PendingIrps;

	// Reference Count used to decide when to delete the NMPacketDevice instance
	KNdisRefCounter		m_RefCount;

#if NDIS51
	// For XP, implement send packet cancellation
	//
	// Interlocked IRP list for pending sends
	KInterlockedList<IRP>	m_SendList;

	// Cancel ID generator for sent packets
	KNdisPacketCancelId	m_CancelId;
#endif // NDIS51

};



///////////////////////////////////////////////////////////////////////
// Local comparison operator overload, which checks if given packet is 
// associated with given IRP.
//
// Parameters:
// 	p                    - Packet descriptor of interest
// 	irp                  - IRP of interest
// Returns:
// 	true if the packet does store the pointer to the given IRP
//  in its reserved area. 
// Comments:
// 	The operator is required by KListBrowser<NDIS_PACKET>::RemoveByKey
//  template used elsewhere.
static inline
bool operator==(NDIS_PACKET& p, KIrp& irp)
{ 
	return NmPacketDevice::PacketList::GetContext(&p)->Irp == irp;
}

#endif		// __NmPacketDevice_h__
