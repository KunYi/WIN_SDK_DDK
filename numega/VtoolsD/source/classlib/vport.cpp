// vport.cpp - implementation of VIOPort class
//=============================================================================
//
// Compuware Corporation
// NuMega Lab
// 9 Townsend West
// Nashua, NH 03060  USA
//
// Copyright (c) 1998 Compuware Corporation. All Rights Reserved.
// Unpublished - rights reserved under the Copyright laws of the
// United States.
//
// U.S. GOVERNMENT RIGHTS-Use, duplication, or disclosure by the
// U.S. Government is subject to restrictions as set forth in 
// Compuware Corporation license agreement and as provided in 
// DFARS 227.7202-1(a) and 227.7202-3(a) (1995), 
// DFARS 252.227-7013(c)(1)(ii)(OCT 1988), FAR 12.212(a) (1995), 
// FAR 52.227-19, or FAR 52.227-14 (ALT III), as applicable.  
// Compuware Corporation.
// 
// This product contains confidential information and trade secrets 
// of Compuware Corporation. Use, disclosure, or reproduction is 
// prohibited without the prior express written permission of Compuware 
// Corporation.
//
//=============================================================================
//
#include <vtoolscp.h>

#include PAGEABLE_CODE_SEGMENT
#include PAGEABLE_DATA_SEGMENT

extern "C" PVOID __cdecl createPortThunk(VIOPort*,BYTE*,DWORD(VIOPort::*)(VMHANDLE,DWORD,CLIENT_STRUCT*,DWORD,DWORD));

// Function
//	VIOPort::VIOPort
//
// Syntax
//	VIOPort::VIOPort(DWORD iport)
//
// Parameters
//	iport		identifies the port (port number)
//
// Remarks
//	Constructs an instance of class VIOPort.  
//
VIOPort::VIOPort(DWORD iport)
{
	m_port = iport;
}

// Function
//	VIOPort::~VIOPort
//
// Syntax
//	VIOPort::~VIOPort()
//
// Remarks
//	Destroys an instance of class VIOPort. Invokes member function
//	unhook to remove I/O handler (unhook has no effect in version 3.1)
//
VIOPort::~VIOPort()
{
	unhook();
}

// Function
//	VIOPort::hook
//
// Syntax
//	BOOL VIOPort::hook()
//
// Remarks
//	Installs a I/O handler for the port.  When trapping is enabled,
//	any I/O operations to the port cause the system to invoke 
//	member function handler.
//
//	In version 3.1, this function is only available during 
//	initialization.
//
// Return Value
//	Returns TRUE if the port is successfully hooked. Otherwise,
//	return FALSE.
//
BOOL VIOPort::hook()
{
	PVOID pFunc = createPortThunk(this, m_thunk, &VIOPort::handler);
#ifdef DEBUG
	BOOL bStatus = Install_IO_Handler(m_port, (PIO_HANDLER) pFunc, NULL);
	if (!bStatus)
		DEBUGEVENT(DBG_WARNING, "Failed to hook port");
	return bStatus;
#else
	return Install_IO_Handler(m_port, (PIO_HANDLER) pFunc, NULL);
#endif
}

// Function
//	VIOPort::unhook
//
// Syntax
//	BOOL VIOPort::unhook()
//
// Remarks
//	Unhooks a port from the handler.
//
// Return Value
//	Returns TRUE if the operation is successful. Otherwise, returns FALSE.
//
BOOL VIOPort::unhook()
{
#ifdef WIN40
	return Remove_IO_Handler(m_port);
#else
	DEBUGEVENT(DBG_WARNING, "Cannot unhook I/O port");
	return FALSE;
#endif
}
	
// Function
//	VOID VIOPort::localEnable
// Syntax
//	VOID VIOPort::localEnable(VMHANDLE hVM)
//
// Parameters
//	hVM	handle of virtual machine in which to enable port trapping
//
// Remarks
//	Enables trapping of the port for the specified virtual machine.
//	Member function hook must have been successfully called prior to
//	invoking this function.
//
VOID VIOPort::localEnable(VMHANDLE hVM)
{
	Enable_Local_Trapping(hVM, m_port);
}

// Function
//	VIOPort::localDisable
//
// Syntax
//	VOID VIOPort::localDisable(VMHANDLE hVM)
//
// Parameters
//	hVM	handle of virtual machine in which to disable port trapping
//
// Remarks
//	Disables trapping of the port for the specified virtual machine.
//	Member function hook must have been successfully called prior to
//	invoking this function.
//
VOID VIOPort::localDisable(VMHANDLE hVM)
{
	Disable_Local_Trapping(hVM, m_port);
}

// Function
//	VIOPort::globalEnable
//
// Syntax
//	VOID VIOPort::globalEnable()
//
// Remarks
//	Enables trapping of the port in all virtual machines. In addition,
//	trapping of the port will be enabled in any new virtual machines
//	that are created.
//
//
VOID VIOPort::globalEnable()
{
	Enable_Global_Trapping(m_port);
}

// Function
//	VIOPort::globalDisable
//
// Syntax
//	VOID VIOPort::globalDisable()
//
// Remarks
//	Disables trapping of the port in all virtual machines. In addition,
//	trapping of the port will be disabled in any new virtual machines
//	that are created.
//
VOID VIOPort::globalDisable()
{
	Disable_Global_Trapping(m_port);
}


// Dummy entry point for member function handler is located in the pageable
// code segment to ensure that the thunk generated by taking its address is
// accessible at the time it is hooked.  The actual handler (of the derived
// class) may be in the locked segment if desired.  The routine that creates
// the thunk for the handler invocation "un-thunks" the compiler generated
// thunk before hooking.

DWORD VIOPort::handler(VMHANDLE, DWORD port, CLIENT_STRUCT* pRegs,
	DWORD iotype, DWORD outdata)

{
	// if this function is called, it means you have not correctly
	// overridden member function handler in the class you derived
	// from VIOPort.

	DEBUGEVENT(DBG_ERROR,"\"handler\" for VIOPort class is not defined correctly");

	return 0;
}

